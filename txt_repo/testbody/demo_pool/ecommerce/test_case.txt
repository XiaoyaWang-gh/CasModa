@Test void findAll_shouldReturnFavouriteList() {     when(this.favouriteService.findAll()).thenReturn(List.of(this.favouriteDto));     ResponseEntity<DtoCollectionResponse<FavouriteDto>> response = this.favouriteResource.findAll();     assertNotNull(response);     assertEquals(1, response.getBody().getCollection().size());     verify(this.favouriteService, times(1)).findAll(); }
@Test void findById_withPathVariables_shouldReturnFavourite() {     when(this.favouriteService.findById(any(FavouriteId.class))).thenReturn(this.favouriteDto);     // 修改为ISO格式的日期时间字符串     ResponseEntity<FavouriteDto> response = this.favouriteResource.findById("1", "1", "2023-01-01T12:00:00");     assertNotNull(response);     assertEquals(this.favouriteDto.getUserId(), response.getBody().getUserId());     verify(this.favouriteService, times(1)).findById(any(FavouriteId.class)); }
@Test void findById_withRequestBody_shouldReturnFavourite() {     when(this.favouriteService.findById(this.favouriteId)).thenReturn(this.favouriteDto);     ResponseEntity<FavouriteDto> response = this.favouriteResource.findById(this.favouriteId);     assertNotNull(response);     assertEquals(this.favouriteDto.getUserId(), response.getBody().getUserId());     verify(this.favouriteService, times(1)).findById(this.favouriteId); }
@Test void save_shouldReturnSavedFavourite() {     when(this.favouriteService.save(this.favouriteDto)).thenReturn(this.favouriteDto);     ResponseEntity<FavouriteDto> response = this.favouriteResource.save(this.favouriteDto);     assertNotNull(response);     assertEquals(this.favouriteDto.getUserId(), response.getBody().getUserId());     verify(this.favouriteService, times(1)).save(this.favouriteDto); }
@Test void update_shouldReturnUpdatedFavourite() {     when(this.favouriteService.update(this.favouriteDto)).thenReturn(this.favouriteDto);     ResponseEntity<FavouriteDto> response = this.favouriteResource.update(this.favouriteDto);     assertNotNull(response);     assertEquals(this.favouriteDto.getUserId(), response.getBody().getUserId());     verify(this.favouriteService, times(1)).update(this.favouriteDto); }
@Test void deleteById_withPathVariables_shouldReturnTrue() {     doNothing().when(this.favouriteService).deleteById(any(FavouriteId.class));     // 修改为ISO格式的日期时间字符串     ResponseEntity<Boolean> response = this.favouriteResource.deleteById("1", "1", "2023-01-01T12:00:00");     assertNotNull(response);     assertTrue(response.getBody());     verify(this.favouriteService, times(1)).deleteById(any(FavouriteId.class)); }
@Test void deleteById_withRequestBody_shouldReturnTrue() {     doNothing().when(this.favouriteService).deleteById(this.favouriteId);     ResponseEntity<Boolean> response = this.favouriteResource.deleteById(this.favouriteId);     assertNotNull(response);     assertTrue(response.getBody());     verify(this.favouriteService, times(1)).deleteById(this.favouriteId); }
@Test void main() {     // 测试主方法是否能正常启动     FavouriteServiceApplication.main(new String[] {}); }
@Test void findAll_shouldReturnFavouriteDtoList() {     when(this.favouriteRepository.findAll()).thenReturn(List.of(this.favourite));     when(this.restTemplate.getForObject(AppConstant.DiscoveredDomainsApi.USER_SERVICE_API_URL + "/1", UserDto.class)).thenReturn(new UserDto());     when(this.restTemplate.getForObject(AppConstant.DiscoveredDomainsApi.PRODUCT_SERVICE_API_URL + "/1", ProductDto.class)).thenReturn(new ProductDto());     List<FavouriteDto> result = this.favouriteService.findAll();     assertNotNull(result);     assertEquals(1, result.size());     verify(this.favouriteRepository, times(1)).findAll(); }
@Test void findById_shouldReturnFavouriteDto() {     when(this.favouriteRepository.findById(this.favouriteId)).thenReturn(Optional.of(this.favourite));     when(this.restTemplate.getForObject(AppConstant.DiscoveredDomainsApi.USER_SERVICE_API_URL + "/1", UserDto.class)).thenReturn(new UserDto());     when(this.restTemplate.getForObject(AppConstant.DiscoveredDomainsApi.PRODUCT_SERVICE_API_URL + "/1", ProductDto.class)).thenReturn(new ProductDto());     FavouriteDto result = this.favouriteService.findById(this.favouriteId);     assertNotNull(result);     assertEquals(this.favourite.getUserId(), result.getUserId());     verify(this.favouriteRepository, times(1)).findById(this.favouriteId); }
@Test void findById_shouldThrowFavouriteNotFoundException() {     when(this.favouriteRepository.findById(this.favouriteId)).thenReturn(Optional.empty());     assertThrows(FavouriteNotFoundException.class, () -> this.favouriteService.findById(this.favouriteId)); }
@Test void save_shouldReturnSavedFavouriteDto() {     when(this.favouriteRepository.save(any(Favourite.class))).thenReturn(this.favourite);     FavouriteDto result = this.favouriteService.save(this.favouriteDto);     assertNotNull(result);     assertEquals(this.favouriteDto.getUserId(), result.getUserId());     verify(this.favouriteRepository, times(1)).save(any(Favourite.class)); }
@Test void update_shouldReturnUpdatedFavouriteDto() {     when(this.favouriteRepository.save(any(Favourite.class))).thenReturn(this.favourite);     FavouriteDto result = this.favouriteService.update(this.favouriteDto);     assertNotNull(result);     assertEquals(this.favouriteDto.getUserId(), result.getUserId());     verify(this.favouriteRepository, times(1)).save(any(Favourite.class)); }
@Test void update_shouldReturnUpdatedFavouriteDto() {     when(this.favouriteRepository.save(any(Favourite.class))).thenReturn(this.favourite);     FavouriteDto result = this.favouriteService.update(this.favouriteDto);     assertNotNull(result);     assertEquals(this.favouriteDto.getUserId(), result.getUserId());     verify(this.favouriteRepository, times(1)).save(any(Favourite.class)); }
@Test void deleteById_shouldInvokeRepositoryDelete() {     doNothing().when(this.favouriteRepository).deleteById(this.favouriteId);     this.favouriteService.deleteById(this.favouriteId);     verify(this.favouriteRepository, times(1)).deleteById(this.favouriteId); }
@Test void findAll_shouldReturnOrderDtoList() {     when(this.orderRepository.findAll()).thenReturn(List.of(this.order));     this.orderService.findAll().stream().map(o -> {         System.out.println(o);         return o;     }).forEach(System.out::println); }
@Test void findAll_shouldReturnOrderDtoList() {     when(this.orderRepository.findAll()).thenReturn(List.of(this.order));     this.orderService.findAll().stream().map(o -> {         System.out.println(o);         return o;     }).forEach(System.out::println); }
@Test void findById_shouldReturnOrderDto() {     when(this.orderRepository.findById(1)).thenReturn(Optional.of(this.order));     System.out.println(this.orderService.findById(1)); }
@Test void save_shouldReturnSavedOrderDto() {     when(this.orderRepository.save(this.order)).thenReturn(this.order);     System.out.println(this.orderService.save(this.orderDto)); }
@Test void update_shouldReturnUpdatedOrderDto() {     when(this.orderRepository.save(this.order)).thenReturn(this.order);     when(this.orderRepository.findById(1)).thenReturn(Optional.of(this.order));     System.out.println(this.orderService.update(this.orderDto)); }
@Test void update_shouldReturnUpdatedOrderDto() {     when(this.orderRepository.save(this.order)).thenReturn(this.order);     when(this.orderRepository.findById(1)).thenReturn(Optional.of(this.order));     System.out.println(this.orderService.update(this.orderDto)); }
@Test void update_shouldReturnUpdatedOrderDto() {     when(this.orderRepository.save(this.order)).thenReturn(this.order);     when(this.orderRepository.findById(1)).thenReturn(Optional.of(this.order));     System.out.println(this.orderService.update(this.orderDto)); }
@Test void deleteById_shouldInvokeRepositoryDelete() {     when(this.orderRepository.findById(1)).thenReturn(Optional.of(this.order));     this.orderService.deleteById(1); }
@Test void deleteById_shouldInvokeRepositoryDelete() {     when(this.orderRepository.findById(1)).thenReturn(Optional.of(this.order));     this.orderService.deleteById(1); }
@Test void findById_shouldThrowOrderNotFoundException() {     when(this.orderRepository.findById(1)).thenReturn(Optional.empty());     try {         this.orderService.findById(1);     } catch (final OrderNotFoundException ex) {         System.out.println(ex.getMessage());     } }
@Test void findAll_shouldReturnCartDtoList() {     when(cartRepository.findAll()).thenReturn(List.of(this.cart));     when(restTemplate.getForObject(AppConstant.DiscoveredDomainsApi.USER_SERVICE_API_URL + "/1", UserDto.class)).thenReturn(new UserDto());     List<CartDto> result = cartService.findAll();     assertNotNull(result);     assertEquals(1, result.size());     verify(cartRepository, times(1)).findAll(); }
@Test void findById_shouldReturnCartDto() {     when(cartRepository.findById(1)).thenReturn(Optional.of(this.cart));     when(restTemplate.getForObject(AppConstant.DiscoveredDomainsApi.USER_SERVICE_API_URL + "/1", UserDto.class)).thenReturn(new UserDto());     CartDto result = cartService.findById(1);     assertNotNull(result);     assertEquals(this.cart.getCartId(), result.getCartId());     verify(cartRepository, times(1)).findById(1); }
@Test void findById_shouldThrowCartNotFoundException() {     when(cartRepository.findById(1)).thenReturn(Optional.empty());     assertThrows(CartNotFoundException.class, () -> cartService.findById(1)); }
@Test void save_shouldReturnSavedCartDto() {     when(cartRepository.save(any(Cart.class))).thenReturn(this.cart);     CartDto result = cartService.save(this.cartDto);     assertNotNull(result);     assertEquals(this.cartDto.getCartId(), result.getCartId());     verify(cartRepository, times(1)).save(any(Cart.class)); }
@Test void update_shouldReturnUpdatedCartDto() {     when(cartRepository.save(any(Cart.class))).thenReturn(this.cart);     CartDto result = cartService.update(this.cartDto);     assertNotNull(result);     assertEquals(this.cartDto.getCartId(), result.getCartId());     verify(cartRepository, times(1)).save(any(Cart.class)); }
@Test void update_shouldReturnUpdatedCartDto() {     when(cartRepository.save(any(Cart.class))).thenReturn(this.cart);     CartDto result = cartService.update(this.cartDto);     assertNotNull(result);     assertEquals(this.cartDto.getCartId(), result.getCartId());     verify(cartRepository, times(1)).save(any(Cart.class)); }
@Test void deleteById_shouldInvokeRepositoryDelete() {     doNothing().when(cartRepository).deleteById(1);     cartService.deleteById(1);     verify(cartRepository, times(1)).deleteById(1); }
@Test void findAll_shouldReturnAllOrders() {     when(orderService.findAll()).thenReturn(List.of(orderDto));     ResponseEntity<DtoCollectionResponse<OrderDto>> response = orderResource.findAll();     assertEquals(1, response.getBody().getCollection().size());     verify(orderService).findAll(); }
@Test void findById_shouldReturnOrder() {     when(orderService.findById(1)).thenReturn(orderDto);     ResponseEntity<OrderDto> response = orderResource.findById("1");     assertEquals(orderDto, response.getBody());     verify(orderService).findById(1); }
@Test void save_shouldSaveOrder() {     when(orderService.save(orderDto)).thenReturn(orderDto);     ResponseEntity<OrderDto> response = orderResource.save(orderDto);     assertEquals(orderDto, response.getBody());     verify(orderService).save(orderDto); }
@Test void update_shouldUpdateOrder() {     when(orderService.update(orderDto)).thenReturn(orderDto);     ResponseEntity<OrderDto> response = orderResource.update(orderDto);     assertEquals(orderDto, response.getBody());     verify(orderService).update(orderDto); }
@Test void updateWithId_shouldUpdateOrder() {     when(orderService.update(1, orderDto)).thenReturn(orderDto);     ResponseEntity<OrderDto> response = orderResource.update("1", orderDto);     assertEquals(orderDto, response.getBody());     verify(orderService).update(1, orderDto); }
@Test void deleteById_shouldDeleteOrder() {     doNothing().when(orderService).deleteById(1);     ResponseEntity<Boolean> response = orderResource.deleteById("1");     assertTrue(response.getBody());     verify(orderService).deleteById(1); }
@Test void shouldSerializeCorrectly() throws JsonProcessingException {     ExceptionMsg msg = ExceptionMsg.builder().timestamp(ZonedDateTime.now()).httpStatus(HttpStatus.BAD_REQUEST).msg("Test message").build();     String json = objectMapper.writeValueAsString(msg);     assertNotNull(json);     assertTrue(json.contains("timestamp"));     assertTrue(json.contains("BAD_REQUEST"));     assertTrue(json.contains("Test message")); }
@Test void shouldHandleNullThrowable() {     ExceptionMsg msg = ExceptionMsg.builder().timestamp(ZonedDateTime.now()).httpStatus(HttpStatus.INTERNAL_SERVER_ERROR).msg("Error occurred").build();     assertNull(msg.getThrowable()); }
@Test void findAll_shouldReturnAllCarts() {     when(cartService.findAll()).thenReturn(List.of(cartDto));     ResponseEntity<DtoCollectionResponse<CartDto>> response = cartResource.findAll();     assertEquals(1, response.getBody().getCollection().size());     verify(cartService).findAll(); }
@Test void findById_shouldReturnCart() {     when(cartService.findById(1)).thenReturn(cartDto);     ResponseEntity<CartDto> response = cartResource.findById("1");     assertEquals(cartDto, response.getBody());     verify(cartService).findById(1); }
@Test void save_shouldSaveCart() {     when(cartService.save(cartDto)).thenReturn(cartDto);     ResponseEntity<CartDto> response = cartResource.save(cartDto);     assertEquals(cartDto, response.getBody());     verify(cartService).save(cartDto); }
@Test void update_shouldUpdateCart() {     when(cartService.update(cartDto)).thenReturn(cartDto);     ResponseEntity<CartDto> response = cartResource.update(cartDto);     assertEquals(cartDto, response.getBody());     verify(cartService).update(cartDto); }
@Test void updateWithId_shouldUpdateCart() {     when(cartService.update(1, cartDto)).thenReturn(cartDto);     ResponseEntity<CartDto> response = cartResource.update("1", cartDto);     assertEquals(cartDto, response.getBody());     verify(cartService).update(1, cartDto); }
@Test void deleteById_shouldDeleteCart() {     doNothing().when(cartService).deleteById(1);     ResponseEntity<Boolean> response = cartResource.deleteById("1");     assertTrue(response.getBody());     verify(cartService).deleteById(1); }
@Test void findAll_shouldReturnPaymentDtoList() {     when(this.paymentRepository.findAll()).thenReturn(List.of(this.payment));     when(this.restTemplate.getForObject(AppConstant.DiscoveredDomainsApi.ORDER_SERVICE_API_URL + "/1", OrderDto.class)).thenReturn(new OrderDto());     List<PaymentDto> result = this.paymentService.findAll();     assertNotNull(result);     assertEquals(1, result.size());     verify(this.paymentRepository, times(1)).findAll(); }
@Test void findById_shouldReturnPaymentDto() {     when(this.paymentRepository.findById(1)).thenReturn(Optional.of(this.payment));     when(this.restTemplate.getForObject(AppConstant.DiscoveredDomainsApi.ORDER_SERVICE_API_URL + "/1", OrderDto.class)).thenReturn(new OrderDto());     PaymentDto result = this.paymentService.findById(1);     assertNotNull(result);     assertEquals(this.payment.getPaymentId(), result.getPaymentId());     verify(this.paymentRepository, times(1)).findById(1); }
@Test void findById_shouldThrowPaymentNotFoundException() {     when(this.paymentRepository.findById(1)).thenReturn(Optional.empty());     assertThrows(PaymentNotFoundException.class, () -> this.paymentService.findById(1)); }
@Test void save_shouldReturnSavedPaymentDto() {     when(this.paymentRepository.save(any(Payment.class))).thenReturn(this.payment);     PaymentDto result = this.paymentService.save(this.paymentDto);     assertNotNull(result);     assertEquals(this.paymentDto.getPaymentId(), result.getPaymentId());     verify(this.paymentRepository, times(1)).save(any(Payment.class)); }
@Test void update_shouldReturnUpdatedPaymentDto() {     when(this.paymentRepository.save(any(Payment.class))).thenReturn(this.payment);     PaymentDto result = this.paymentService.update(this.paymentDto);     assertNotNull(result);     assertEquals(this.paymentDto.getPaymentId(), result.getPaymentId());     verify(this.paymentRepository, times(1)).save(any(Payment.class)); }
@Test void update_shouldReturnUpdatedPaymentDto() {     when(this.paymentRepository.save(any(Payment.class))).thenReturn(this.payment);     PaymentDto result = this.paymentService.update(this.paymentDto);     assertNotNull(result);     assertEquals(this.paymentDto.getPaymentId(), result.getPaymentId());     verify(this.paymentRepository, times(1)).save(any(Payment.class)); }
@Test void deleteById_shouldInvokeRepositoryDelete() {     doNothing().when(this.paymentRepository).deleteById(1);     this.paymentService.deleteById(1);     verify(this.paymentRepository, times(1)).deleteById(1); }
@Test void findAll_shouldReturnAllCategories() {     when(categoryRepository.findAll()).thenReturn(List.of(CategoryMappingHelper.map(categoryDto)));     List<CategoryDto> result = categoryService.findAll();     assertEquals(1, result.size());     verify(categoryRepository).findAll(); }
@Test void findAll_shouldReturnAllCategories() {     when(categoryRepository.findAll()).thenReturn(List.of(CategoryMappingHelper.map(categoryDto)));     List<CategoryDto> result = categoryService.findAll();     assertEquals(1, result.size());     verify(categoryRepository).findAll(); }
@Test void findById_shouldReturnCategory_whenExists() {     when(categoryRepository.findById(1)).thenReturn(Optional.of(CategoryMappingHelper.map(categoryDto)));     CategoryDto result = categoryService.findById(1);     assertEquals(categoryDto.getCategoryTitle(), result.getCategoryTitle());     verify(categoryRepository).findById(1); }
@Test void findById_shouldReturnCategory_whenExists() {     when(categoryRepository.findById(1)).thenReturn(Optional.of(CategoryMappingHelper.map(categoryDto)));     CategoryDto result = categoryService.findById(1);     assertEquals(categoryDto.getCategoryTitle(), result.getCategoryTitle());     verify(categoryRepository).findById(1); }
@Test void findById_shouldThrowException_whenNotExists() {     when(categoryRepository.findById(1)).thenReturn(Optional.empty());     assertThrows(CategoryNotFoundException.class, () -> categoryService.findById(1));     verify(categoryRepository).findById(1); }
@Test void save_shouldSaveCategory() {     when(categoryRepository.save(CategoryMappingHelper.map(categoryDto))).thenReturn(CategoryMappingHelper.map(categoryDto));     CategoryDto result = categoryService.save(categoryDto);     assertEquals(categoryDto.getCategoryTitle(), result.getCategoryTitle());     verify(categoryRepository).save(any()); }
@Test void save_shouldSaveCategory() {     when(categoryRepository.save(CategoryMappingHelper.map(categoryDto))).thenReturn(CategoryMappingHelper.map(categoryDto));     CategoryDto result = categoryService.save(categoryDto);     assertEquals(categoryDto.getCategoryTitle(), result.getCategoryTitle());     verify(categoryRepository).save(any()); }
@Test void update_shouldUpdateCategory() {     when(categoryRepository.save(CategoryMappingHelper.map(categoryDto))).thenReturn(CategoryMappingHelper.map(categoryDto));     CategoryDto result = categoryService.update(categoryDto);     assertEquals(categoryDto.getCategoryTitle(), result.getCategoryTitle());     verify(categoryRepository).save(any()); }
@Test void update_shouldUpdateCategory() {     when(categoryRepository.save(CategoryMappingHelper.map(categoryDto))).thenReturn(CategoryMappingHelper.map(categoryDto));     CategoryDto result = categoryService.update(categoryDto);     assertEquals(categoryDto.getCategoryTitle(), result.getCategoryTitle());     verify(categoryRepository).save(any()); }
@Test void update_shouldUpdateCategory() {     when(categoryRepository.save(CategoryMappingHelper.map(categoryDto))).thenReturn(CategoryMappingHelper.map(categoryDto));     CategoryDto result = categoryService.update(categoryDto);     assertEquals(categoryDto.getCategoryTitle(), result.getCategoryTitle());     verify(categoryRepository).save(any()); }
@Test void updateWithId_shouldUpdateCategory() {     when(categoryRepository.findById(1)).thenReturn(Optional.of(CategoryMappingHelper.map(categoryDto)));     when(categoryRepository.save(CategoryMappingHelper.map(categoryDto))).thenReturn(CategoryMappingHelper.map(categoryDto));     CategoryDto result = categoryService.update(1, categoryDto);     assertEquals(categoryDto.getCategoryTitle(), result.getCategoryTitle());     verify(categoryRepository).findById(1);     verify(categoryRepository).save(any()); }
@Test void updateWithId_shouldUpdateCategory() {     when(categoryRepository.findById(1)).thenReturn(Optional.of(CategoryMappingHelper.map(categoryDto)));     when(categoryRepository.save(CategoryMappingHelper.map(categoryDto))).thenReturn(CategoryMappingHelper.map(categoryDto));     CategoryDto result = categoryService.update(1, categoryDto);     assertEquals(categoryDto.getCategoryTitle(), result.getCategoryTitle());     verify(categoryRepository).findById(1);     verify(categoryRepository).save(any()); }
@Test void updateWithId_shouldUpdateCategory() {     when(categoryRepository.findById(1)).thenReturn(Optional.of(CategoryMappingHelper.map(categoryDto)));     when(categoryRepository.save(CategoryMappingHelper.map(categoryDto))).thenReturn(CategoryMappingHelper.map(categoryDto));     CategoryDto result = categoryService.update(1, categoryDto);     assertEquals(categoryDto.getCategoryTitle(), result.getCategoryTitle());     verify(categoryRepository).findById(1);     verify(categoryRepository).save(any()); }
@Test void updateWithId_shouldUpdateCategory() {     when(categoryRepository.findById(1)).thenReturn(Optional.of(CategoryMappingHelper.map(categoryDto)));     when(categoryRepository.save(CategoryMappingHelper.map(categoryDto))).thenReturn(CategoryMappingHelper.map(categoryDto));     CategoryDto result = categoryService.update(1, categoryDto);     assertEquals(categoryDto.getCategoryTitle(), result.getCategoryTitle());     verify(categoryRepository).findById(1);     verify(categoryRepository).save(any()); }
@Test void deleteById_shouldDeleteCategory() {     doNothing().when(categoryRepository).deleteById(1);     categoryService.deleteById(1);     verify(categoryRepository).deleteById(1); }
@Test void findAll_shouldReturnAllProducts() {     when(productRepository.findAll()).thenReturn(List.of(ProductMappingHelper.map(productDto)));     List<ProductDto> result = productService.findAll();     assertEquals(1, result.size());     verify(productRepository).findAll(); }
@Test void findAll_shouldReturnAllProducts() {     when(productRepository.findAll()).thenReturn(List.of(ProductMappingHelper.map(productDto)));     List<ProductDto> result = productService.findAll();     assertEquals(1, result.size());     verify(productRepository).findAll(); }
@Test void findById_shouldReturnProduct_whenExists() {     when(productRepository.findById(1)).thenReturn(Optional.of(ProductMappingHelper.map(productDto)));     ProductDto result = productService.findById(1);     assertEquals(productDto.getProductTitle(), result.getProductTitle());     verify(productRepository).findById(1); }
@Test void findById_shouldReturnProduct_whenExists() {     when(productRepository.findById(1)).thenReturn(Optional.of(ProductMappingHelper.map(productDto)));     ProductDto result = productService.findById(1);     assertEquals(productDto.getProductTitle(), result.getProductTitle());     verify(productRepository).findById(1); }
@Test void findById_shouldThrowException_whenNotExists() {     when(productRepository.findById(1)).thenReturn(Optional.empty());     assertThrows(ProductNotFoundException.class, () -> productService.findById(1));     verify(productRepository).findById(1); }
@Test void save_shouldSaveProduct() {     when(productRepository.save(ProductMappingHelper.map(productDto))).thenReturn(ProductMappingHelper.map(productDto));     ProductDto result = productService.save(productDto);     assertEquals(productDto.getProductTitle(), result.getProductTitle());     verify(productRepository).save(any()); }
@Test void save_shouldSaveProduct() {     when(productRepository.save(ProductMappingHelper.map(productDto))).thenReturn(ProductMappingHelper.map(productDto));     ProductDto result = productService.save(productDto);     assertEquals(productDto.getProductTitle(), result.getProductTitle());     verify(productRepository).save(any()); }
@Test void update_shouldUpdateProduct() {     when(productRepository.save(ProductMappingHelper.map(productDto))).thenReturn(ProductMappingHelper.map(productDto));     ProductDto result = productService.update(productDto);     assertEquals(productDto.getProductTitle(), result.getProductTitle());     verify(productRepository).save(any()); }
@Test void update_shouldUpdateProduct() {     when(productRepository.save(ProductMappingHelper.map(productDto))).thenReturn(ProductMappingHelper.map(productDto));     ProductDto result = productService.update(productDto);     assertEquals(productDto.getProductTitle(), result.getProductTitle());     verify(productRepository).save(any()); }
@Test void update_shouldUpdateProduct() {     when(productRepository.save(ProductMappingHelper.map(productDto))).thenReturn(ProductMappingHelper.map(productDto));     ProductDto result = productService.update(productDto);     assertEquals(productDto.getProductTitle(), result.getProductTitle());     verify(productRepository).save(any()); }
@Test void updateWithId_shouldUpdateProduct() {     when(productRepository.findById(1)).thenReturn(Optional.of(ProductMappingHelper.map(productDto)));     when(productRepository.save(ProductMappingHelper.map(productDto))).thenReturn(ProductMappingHelper.map(productDto));     ProductDto result = productService.update(1, productDto);     assertEquals(productDto.getProductTitle(), result.getProductTitle());     verify(productRepository).findById(1);     verify(productRepository).save(any()); }
@Test void updateWithId_shouldUpdateProduct() {     when(productRepository.findById(1)).thenReturn(Optional.of(ProductMappingHelper.map(productDto)));     when(productRepository.save(ProductMappingHelper.map(productDto))).thenReturn(ProductMappingHelper.map(productDto));     ProductDto result = productService.update(1, productDto);     assertEquals(productDto.getProductTitle(), result.getProductTitle());     verify(productRepository).findById(1);     verify(productRepository).save(any()); }
@Test void updateWithId_shouldUpdateProduct() {     when(productRepository.findById(1)).thenReturn(Optional.of(ProductMappingHelper.map(productDto)));     when(productRepository.save(ProductMappingHelper.map(productDto))).thenReturn(ProductMappingHelper.map(productDto));     ProductDto result = productService.update(1, productDto);     assertEquals(productDto.getProductTitle(), result.getProductTitle());     verify(productRepository).findById(1);     verify(productRepository).save(any()); }
@Test void updateWithId_shouldUpdateProduct() {     when(productRepository.findById(1)).thenReturn(Optional.of(ProductMappingHelper.map(productDto)));     when(productRepository.save(ProductMappingHelper.map(productDto))).thenReturn(ProductMappingHelper.map(productDto));     ProductDto result = productService.update(1, productDto);     assertEquals(productDto.getProductTitle(), result.getProductTitle());     verify(productRepository).findById(1);     verify(productRepository).save(any()); }
@Test void deleteById_shouldDeleteProduct() {     when(productRepository.findById(1)).thenReturn(Optional.of(ProductMappingHelper.map(productDto)));     doNothing().when(productRepository).delete(any());     productService.deleteById(1);     verify(productRepository).findById(1);     verify(productRepository).delete(any()); }
@Test void deleteById_shouldDeleteProduct() {     when(productRepository.findById(1)).thenReturn(Optional.of(ProductMappingHelper.map(productDto)));     doNothing().when(productRepository).delete(any());     productService.deleteById(1);     verify(productRepository).findById(1);     verify(productRepository).delete(any()); }
@Test void deleteById_shouldDeleteProduct() {     when(productRepository.findById(1)).thenReturn(Optional.of(ProductMappingHelper.map(productDto)));     doNothing().when(productRepository).delete(any());     productService.deleteById(1);     verify(productRepository).findById(1);     verify(productRepository).delete(any()); }
@Test void handleValidationException_shouldHandleMethodArgumentNotValid() {     ResponseEntity<ExceptionMsg> response = apiExceptionHandler.handleValidationException(methodArgException);     assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());     assertTrue(response.getBody().getMsg().contains("default message")); }
@Test void handleValidationException_shouldHandleBindException() {     ResponseEntity<ExceptionMsg> response = apiExceptionHandler.handleValidationException(bindException);     assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());     assertTrue(response.getBody().getMsg().contains("default message")); }
@Test void handleApiRequestException_shouldHandleCategoryNotFound() {     CategoryNotFoundException ex = new CategoryNotFoundException("Category not found");     ResponseEntity<ExceptionMsg> response = apiExceptionHandler.handleApiRequestException(ex);     assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());     assertTrue(response.getBody().getMsg().contains("Category not found")); }
@Test void handleApiRequestException_shouldHandleProductNotFound() {     ProductNotFoundException ex = new ProductNotFoundException("Product not found");     ResponseEntity<ExceptionMsg> response = apiExceptionHandler.handleApiRequestException(ex);     assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());     assertTrue(response.getBody().getMsg().contains("Product not found")); }
@Test void findAll_shouldReturnOrderItemDtoList() {     // Mock repository     when(this.orderItemRepository.findAll()).thenReturn(List.of(OrderItemMappingHelper.map(this.orderItemDto)));     // Mock REST calls     when(this.restTemplate.getForObject(AppConstant.DiscoveredDomainsApi.PRODUCT_SERVICE_API_URL + "/1", ProductDto.class)).thenReturn(this.orderItemDto.getProductDto());     when(this.restTemplate.getForObject(AppConstant.DiscoveredDomainsApi.ORDER_SERVICE_API_URL + "/1", OrderDto.class)).thenReturn(this.orderItemDto.getOrderDto());     // Test     List<OrderItemDto> result = this.orderItemService.findAll();     // Verify     assertNotNull(result);     assertEquals(1, result.size());     assertEquals(this.orderItemId, new OrderItemId(result.get(0).getOrderId(), result.get(0).getProductId())); }
@Test void findAll_shouldReturnOrderItemDtoList() {     // Mock repository     when(this.orderItemRepository.findAll()).thenReturn(List.of(OrderItemMappingHelper.map(this.orderItemDto)));     // Mock REST calls     when(this.restTemplate.getForObject(AppConstant.DiscoveredDomainsApi.PRODUCT_SERVICE_API_URL + "/1", ProductDto.class)).thenReturn(this.orderItemDto.getProductDto());     when(this.restTemplate.getForObject(AppConstant.DiscoveredDomainsApi.ORDER_SERVICE_API_URL + "/1", OrderDto.class)).thenReturn(this.orderItemDto.getOrderDto());     // Test     List<OrderItemDto> result = this.orderItemService.findAll();     // Verify     assertNotNull(result);     assertEquals(1, result.size());     assertEquals(this.orderItemId, new OrderItemId(result.get(0).getOrderId(), result.get(0).getProductId())); }
@Test void findById_shouldReturnOrderItemDto() {     // Mock repository     when(this.orderItemRepository.findById(this.orderItemId)).thenReturn(Optional.of(OrderItemMappingHelper.map(this.orderItemDto)));     // Mock REST calls     when(this.restTemplate.getForObject(AppConstant.DiscoveredDomainsApi.PRODUCT_SERVICE_API_URL + "/1", ProductDto.class)).thenReturn(this.orderItemDto.getProductDto());     when(this.restTemplate.getForObject(AppConstant.DiscoveredDomainsApi.ORDER_SERVICE_API_URL + "/1", OrderDto.class)).thenReturn(this.orderItemDto.getOrderDto());     // Test     OrderItemDto result = this.orderItemService.findById(this.orderItemId);     // Verify     assertNotNull(result);     assertEquals(this.orderItemId, new OrderItemId(result.getOrderId(), result.getProductId())); }
@Test void findById_shouldReturnOrderItemDto() {     // Mock repository     when(this.orderItemRepository.findById(this.orderItemId)).thenReturn(Optional.of(OrderItemMappingHelper.map(this.orderItemDto)));     // Mock REST calls     when(this.restTemplate.getForObject(AppConstant.DiscoveredDomainsApi.PRODUCT_SERVICE_API_URL + "/1", ProductDto.class)).thenReturn(this.orderItemDto.getProductDto());     when(this.restTemplate.getForObject(AppConstant.DiscoveredDomainsApi.ORDER_SERVICE_API_URL + "/1", OrderDto.class)).thenReturn(this.orderItemDto.getOrderDto());     // Test     OrderItemDto result = this.orderItemService.findById(this.orderItemId);     // Verify     assertNotNull(result);     assertEquals(this.orderItemId, new OrderItemId(result.getOrderId(), result.getProductId())); }
@Test void findById_shouldThrowOrderItemNotFoundException() {     // Mock repository     when(this.orderItemRepository.findById(this.orderItemId)).thenReturn(Optional.empty());     // Test & Verify     assertThrows(OrderItemNotFoundException.class, () -> this.orderItemService.findById(this.orderItemId)); }
@Test void save_shouldReturnSavedOrderItemDto() {     // Mock repository     when(this.orderItemRepository.save(OrderItemMappingHelper.map(this.orderItemDto))).thenReturn(OrderItemMappingHelper.map(this.orderItemDto));     // Test     OrderItemDto result = this.orderItemService.save(this.orderItemDto);     // Verify     assertNotNull(result);     assertEquals(this.orderItemId, new OrderItemId(result.getOrderId(), result.getProductId())); }
@Test void save_shouldReturnSavedOrderItemDto() {     // Mock repository     when(this.orderItemRepository.save(OrderItemMappingHelper.map(this.orderItemDto))).thenReturn(OrderItemMappingHelper.map(this.orderItemDto));     // Test     OrderItemDto result = this.orderItemService.save(this.orderItemDto);     // Verify     assertNotNull(result);     assertEquals(this.orderItemId, new OrderItemId(result.getOrderId(), result.getProductId())); }
@Test void update_shouldReturnUpdatedOrderItemDto() {     // Mock repository     when(this.orderItemRepository.save(OrderItemMappingHelper.map(this.orderItemDto))).thenReturn(OrderItemMappingHelper.map(this.orderItemDto));     // Test     OrderItemDto result = this.orderItemService.update(this.orderItemDto);     // Verify     assertNotNull(result);     assertEquals(this.orderItemId, new OrderItemId(result.getOrderId(), result.getProductId())); }
@Test void update_shouldReturnUpdatedOrderItemDto() {     // Mock repository     when(this.orderItemRepository.save(OrderItemMappingHelper.map(this.orderItemDto))).thenReturn(OrderItemMappingHelper.map(this.orderItemDto));     // Test     OrderItemDto result = this.orderItemService.update(this.orderItemDto);     // Verify     assertNotNull(result);     assertEquals(this.orderItemId, new OrderItemId(result.getOrderId(), result.getProductId())); }
@Test void update_shouldReturnUpdatedOrderItemDto() {     // Mock repository     when(this.orderItemRepository.save(OrderItemMappingHelper.map(this.orderItemDto))).thenReturn(OrderItemMappingHelper.map(this.orderItemDto));     // Test     OrderItemDto result = this.orderItemService.update(this.orderItemDto);     // Verify     assertNotNull(result);     assertEquals(this.orderItemId, new OrderItemId(result.getOrderId(), result.getProductId())); }
@Test void deleteById_shouldDeleteOrderItem() {     // Test     this.orderItemService.deleteById(this.orderItemId);     // Verify     verify(this.orderItemRepository, times(1)).deleteById(this.orderItemId); }
@Test void findAll_shouldReturnUserDtoList() {     when(userRepository.findAll()).thenReturn(List.of(UserMappingHelper.map(userDto)));     List<UserDto> result = userService.findAll();     assertNotNull(result);     assertEquals(1, result.size());     verify(userRepository, times(1)).findAll(); }
@Test void findAll_shouldReturnUserDtoList() {     when(userRepository.findAll()).thenReturn(List.of(UserMappingHelper.map(userDto)));     List<UserDto> result = userService.findAll();     assertNotNull(result);     assertEquals(1, result.size());     verify(userRepository, times(1)).findAll(); }
@Test void findById_withValidId_shouldReturnUserDto() {     when(userRepository.findById(validUserId)).thenReturn(Optional.of(UserMappingHelper.map(userDto)));     UserDto result = userService.findById(validUserId);     assertNotNull(result);     assertEquals(validUserId, result.getUserId());     verify(userRepository, times(1)).findById(validUserId); }
@Test void findById_withValidId_shouldReturnUserDto() {     when(userRepository.findById(validUserId)).thenReturn(Optional.of(UserMappingHelper.map(userDto)));     UserDto result = userService.findById(validUserId);     assertNotNull(result);     assertEquals(validUserId, result.getUserId());     verify(userRepository, times(1)).findById(validUserId); }
@Test void findById_withInvalidId_shouldThrowException() {     when(userRepository.findById(invalidUserId)).thenReturn(Optional.empty());     assertThrows(UserObjectNotFoundException.class, () -> userService.findById(invalidUserId));     verify(userRepository, times(1)).findById(invalidUserId); }
@Test void save_shouldReturnPersistedUserDto() {     when(userRepository.save(any())).thenReturn(UserMappingHelper.map(userDto));     UserDto result = userService.save(userDto);     assertNotNull(result);     assertEquals(userDto.getUserId(), result.getUserId());     verify(userRepository, times(1)).save(any()); }
@Test void save_shouldReturnPersistedUserDto() {     when(userRepository.save(any())).thenReturn(UserMappingHelper.map(userDto));     UserDto result = userService.save(userDto);     assertNotNull(result);     assertEquals(userDto.getUserId(), result.getUserId());     verify(userRepository, times(1)).save(any()); }
@Test void update_shouldReturnUpdatedUserDto() {     when(userRepository.save(any())).thenReturn(UserMappingHelper.map(userDto));     UserDto result = userService.update(userDto);     assertNotNull(result);     assertEquals(userDto.getUserId(), result.getUserId());     verify(userRepository, times(1)).save(any()); }
@Test void update_shouldReturnUpdatedUserDto() {     when(userRepository.save(any())).thenReturn(UserMappingHelper.map(userDto));     UserDto result = userService.update(userDto);     assertNotNull(result);     assertEquals(userDto.getUserId(), result.getUserId());     verify(userRepository, times(1)).save(any()); }
@Test void update_shouldReturnUpdatedUserDto() {     when(userRepository.save(any())).thenReturn(UserMappingHelper.map(userDto));     UserDto result = userService.update(userDto);     assertNotNull(result);     assertEquals(userDto.getUserId(), result.getUserId());     verify(userRepository, times(1)).save(any()); }
@Test void deleteById_shouldPerformDeletion() {     doNothing().when(userRepository).deleteById(validUserId);     userService.deleteById(validUserId);     verify(userRepository, times(1)).deleteById(validUserId); }
@Test void findByUsername_withValidUsername_shouldReturnUserDto() {     when(userRepository.findByCredentialUsername(validUsername)).thenReturn(Optional.of(UserMappingHelper.map(userDto)));     UserDto result = userService.findByUsername(validUsername);     assertNotNull(result);     verify(userRepository, times(1)).findByCredentialUsername(validUsername); }
@Test void findByUsername_withValidUsername_shouldReturnUserDto() {     when(userRepository.findByCredentialUsername(validUsername)).thenReturn(Optional.of(UserMappingHelper.map(userDto)));     UserDto result = userService.findByUsername(validUsername);     assertNotNull(result);     verify(userRepository, times(1)).findByCredentialUsername(validUsername); }
@Test void findByUsername_withValidUsername_shouldReturnUserDto() {     when(userRepository.findByCredentialUsername(validUsername)).thenReturn(Optional.of(UserMappingHelper.map(userDto)));     UserDto result = userService.findByUsername(validUsername);     assertNotNull(result);     verify(userRepository, times(1)).findByCredentialUsername(validUsername); }
@Test void findByUsername_withInvalidUsername_shouldThrowException() {     when(userRepository.findByCredentialUsername(invalidUsername)).thenReturn(Optional.empty());     assertThrows(UserObjectNotFoundException.class, () -> userService.findByUsername(invalidUsername));     verify(userRepository, times(1)).findByCredentialUsername(invalidUsername); }
@Test void findByUsername_withInvalidUsername_shouldThrowException() {     when(userRepository.findByCredentialUsername(invalidUsername)).thenReturn(Optional.empty());     assertThrows(UserObjectNotFoundException.class, () -> userService.findByUsername(invalidUsername));     verify(userRepository, times(1)).findByCredentialUsername(invalidUsername); }
@Test void findAll_shouldReturnTokenList() {     when(verificationTokenRepository.findAll()).thenReturn(List.of(VerificationTokenMappingHelper.map(verificationTokenDto)));     List<VerificationTokenDto> result = verificationTokenService.findAll();     assertNotNull(result);     assertEquals(1, result.size());     verify(verificationTokenRepository, times(1)).findAll(); }
@Test void findAll_shouldReturnTokenList() {     when(verificationTokenRepository.findAll()).thenReturn(List.of(VerificationTokenMappingHelper.map(verificationTokenDto)));     List<VerificationTokenDto> result = verificationTokenService.findAll();     assertNotNull(result);     assertEquals(1, result.size());     verify(verificationTokenRepository, times(1)).findAll(); }
@Test void findById_withValidId_shouldReturnToken() {     when(verificationTokenRepository.findById(validTokenId)).thenReturn(Optional.of(VerificationTokenMappingHelper.map(verificationTokenDto)));     VerificationTokenDto result = verificationTokenService.findById(validTokenId);     assertNotNull(result);     assertEquals(validTokenId, result.getVerificationTokenId());     verify(verificationTokenRepository, times(1)).findById(validTokenId); }
@Test void findById_withValidId_shouldReturnToken() {     when(verificationTokenRepository.findById(validTokenId)).thenReturn(Optional.of(VerificationTokenMappingHelper.map(verificationTokenDto)));     VerificationTokenDto result = verificationTokenService.findById(validTokenId);     assertNotNull(result);     assertEquals(validTokenId, result.getVerificationTokenId());     verify(verificationTokenRepository, times(1)).findById(validTokenId); }
@Test void findById_withInvalidId_shouldThrowException() {     when(verificationTokenRepository.findById(invalidTokenId)).thenReturn(Optional.empty());     assertThrows(VerificationTokenNotFoundException.class, () -> verificationTokenService.findById(invalidTokenId));     verify(verificationTokenRepository, times(1)).findById(invalidTokenId); }
@Test void save_shouldReturnPersistedToken() {     when(verificationTokenRepository.save(any())).thenReturn(VerificationTokenMappingHelper.map(verificationTokenDto));     VerificationTokenDto result = verificationTokenService.save(verificationTokenDto);     assertNotNull(result);     assertEquals(verificationTokenDto.getVerificationTokenId(), result.getVerificationTokenId());     verify(verificationTokenRepository, times(1)).save(any()); }
@Test void save_shouldReturnPersistedToken() {     when(verificationTokenRepository.save(any())).thenReturn(VerificationTokenMappingHelper.map(verificationTokenDto));     VerificationTokenDto result = verificationTokenService.save(verificationTokenDto);     assertNotNull(result);     assertEquals(verificationTokenDto.getVerificationTokenId(), result.getVerificationTokenId());     verify(verificationTokenRepository, times(1)).save(any()); }
@Test void update_shouldReturnUpdatedToken() {     // 测试无ID参数的update方法     when(verificationTokenRepository.save(any())).thenReturn(VerificationTokenMappingHelper.map(verificationTokenDto));     VerificationTokenDto result = verificationTokenService.update(verificationTokenDto);     assertNotNull(result);     assertEquals(verificationTokenDto.getVerificationTokenId(), result.getVerificationTokenId());     verify(verificationTokenRepository, times(1)).save(any()); }
@Test void update_shouldReturnUpdatedToken() {     // 测试无ID参数的update方法     when(verificationTokenRepository.save(any())).thenReturn(VerificationTokenMappingHelper.map(verificationTokenDto));     VerificationTokenDto result = verificationTokenService.update(verificationTokenDto);     assertNotNull(result);     assertEquals(verificationTokenDto.getVerificationTokenId(), result.getVerificationTokenId());     verify(verificationTokenRepository, times(1)).save(any()); }
@Test void update_shouldReturnUpdatedToken() {     // 测试无ID参数的update方法     when(verificationTokenRepository.save(any())).thenReturn(VerificationTokenMappingHelper.map(verificationTokenDto));     VerificationTokenDto result = verificationTokenService.update(verificationTokenDto);     assertNotNull(result);     assertEquals(verificationTokenDto.getVerificationTokenId(), result.getVerificationTokenId());     verify(verificationTokenRepository, times(1)).save(any()); }
@Test void updateWithId_shouldReturnUpdatedToken() {     // 测试带ID参数的update方法     when(verificationTokenRepository.save(any())).thenReturn(VerificationTokenMappingHelper.map(verificationTokenDto));     VerificationTokenDto result = verificationTokenService.update(validTokenId, verificationTokenDto);     assertNotNull(result);     assertEquals(validTokenId, result.getVerificationTokenId());     verify(verificationTokenRepository, times(1)).save(any()); }
@Test void updateWithId_shouldReturnUpdatedToken() {     // 测试带ID参数的update方法     when(verificationTokenRepository.save(any())).thenReturn(VerificationTokenMappingHelper.map(verificationTokenDto));     VerificationTokenDto result = verificationTokenService.update(validTokenId, verificationTokenDto);     assertNotNull(result);     assertEquals(validTokenId, result.getVerificationTokenId());     verify(verificationTokenRepository, times(1)).save(any()); }
@Test void updateWithId_shouldReturnUpdatedToken() {     // 测试带ID参数的update方法     when(verificationTokenRepository.save(any())).thenReturn(VerificationTokenMappingHelper.map(verificationTokenDto));     VerificationTokenDto result = verificationTokenService.update(validTokenId, verificationTokenDto);     assertNotNull(result);     assertEquals(validTokenId, result.getVerificationTokenId());     verify(verificationTokenRepository, times(1)).save(any()); }
@Test void deleteById_shouldPerformDeletion() {     doNothing().when(verificationTokenRepository).deleteById(validTokenId);     verificationTokenService.deleteById(validTokenId);     verify(verificationTokenRepository, times(1)).deleteById(validTokenId); }
@Test void findAll_shouldReturnCredentialDtoList() {     when(credentialRepository.findAll()).thenReturn(List.of(CredentialMappingHelper.map(credentialDto)));     List<CredentialDto> result = credentialService.findAll();     assertNotNull(result);     assertEquals(1, result.size());     verify(credentialRepository, times(1)).findAll(); }
@Test void findAll_shouldReturnCredentialDtoList() {     when(credentialRepository.findAll()).thenReturn(List.of(CredentialMappingHelper.map(credentialDto)));     List<CredentialDto> result = credentialService.findAll();     assertNotNull(result);     assertEquals(1, result.size());     verify(credentialRepository, times(1)).findAll(); }
@Test void findById_withValidId_shouldReturnCredentialDto() {     when(credentialRepository.findById(validCredentialId)).thenReturn(Optional.of(CredentialMappingHelper.map(credentialDto)));     CredentialDto result = credentialService.findById(validCredentialId);     assertNotNull(result);     assertEquals(validCredentialId, result.getCredentialId());     verify(credentialRepository, times(1)).findById(validCredentialId); }
@Test void findById_withValidId_shouldReturnCredentialDto() {     when(credentialRepository.findById(validCredentialId)).thenReturn(Optional.of(CredentialMappingHelper.map(credentialDto)));     CredentialDto result = credentialService.findById(validCredentialId);     assertNotNull(result);     assertEquals(validCredentialId, result.getCredentialId());     verify(credentialRepository, times(1)).findById(validCredentialId); }
@Test void findById_withInvalidId_shouldThrowException() {     when(credentialRepository.findById(invalidCredentialId)).thenReturn(Optional.empty());     assertThrows(CredentialNotFoundException.class, () -> credentialService.findById(invalidCredentialId));     verify(credentialRepository, times(1)).findById(invalidCredentialId); }
@Test void save_shouldReturnPersistedCredentialDto() {     when(credentialRepository.save(any())).thenReturn(CredentialMappingHelper.map(credentialDto));     CredentialDto result = credentialService.save(credentialDto);     assertNotNull(result);     assertEquals(credentialDto.getCredentialId(), result.getCredentialId());     verify(credentialRepository, times(1)).save(any()); }
@Test void save_shouldReturnPersistedCredentialDto() {     when(credentialRepository.save(any())).thenReturn(CredentialMappingHelper.map(credentialDto));     CredentialDto result = credentialService.save(credentialDto);     assertNotNull(result);     assertEquals(credentialDto.getCredentialId(), result.getCredentialId());     verify(credentialRepository, times(1)).save(any()); }
@Test void update_shouldReturnUpdatedCredentialDto() {     when(credentialRepository.save(any())).thenReturn(CredentialMappingHelper.map(credentialDto));     CredentialDto result = credentialService.update(credentialDto);     assertNotNull(result);     assertEquals(credentialDto.getCredentialId(), result.getCredentialId());     verify(credentialRepository, times(1)).save(any()); }
@Test void update_shouldReturnUpdatedCredentialDto() {     when(credentialRepository.save(any())).thenReturn(CredentialMappingHelper.map(credentialDto));     CredentialDto result = credentialService.update(credentialDto);     assertNotNull(result);     assertEquals(credentialDto.getCredentialId(), result.getCredentialId());     verify(credentialRepository, times(1)).save(any()); }
@Test void update_shouldReturnUpdatedCredentialDto() {     when(credentialRepository.save(any())).thenReturn(CredentialMappingHelper.map(credentialDto));     CredentialDto result = credentialService.update(credentialDto);     assertNotNull(result);     assertEquals(credentialDto.getCredentialId(), result.getCredentialId());     verify(credentialRepository, times(1)).save(any()); }
@Test void deleteById_shouldPerformDeletion() {     doNothing().when(credentialRepository).deleteById(validCredentialId);     credentialService.deleteById(validCredentialId);     verify(credentialRepository, times(1)).deleteById(validCredentialId); }
@Test void findByUsername_withValidUsername_shouldReturnCredentialDto() {     when(credentialRepository.findByUsername(validUsername)).thenReturn(Optional.of(CredentialMappingHelper.map(credentialDto)));     CredentialDto result = credentialService.findByUsername(validUsername);     assertNotNull(result);     assertEquals(validUsername, result.getUsername());     verify(credentialRepository, times(1)).findByUsername(validUsername); }
@Test void findByUsername_withValidUsername_shouldReturnCredentialDto() {     when(credentialRepository.findByUsername(validUsername)).thenReturn(Optional.of(CredentialMappingHelper.map(credentialDto)));     CredentialDto result = credentialService.findByUsername(validUsername);     assertNotNull(result);     assertEquals(validUsername, result.getUsername());     verify(credentialRepository, times(1)).findByUsername(validUsername); }
@Test void findByUsername_withInvalidUsername_shouldThrowException() {     when(credentialRepository.findByUsername(invalidUsername)).thenReturn(Optional.empty());     assertThrows(UserObjectNotFoundException.class, () -> credentialService.findByUsername(invalidUsername));     verify(credentialRepository, times(1)).findByUsername(invalidUsername); }
@Test void save_shouldReturnPersistedAddressDto1() {     // 使用具体参数匹配器代替any()     when(addressRepository.save(any(Address.class))).thenAnswer(invocation -> {         Address entity = invocation.getArgument(0);         // 直接返回传入的实体模拟保存操作         return entity;     });     AddressDto result = addressService.save(addressDto);     assertNotNull(result);     // 添加更多字段验证     assertEquals(addressDto.getFullAddress(), result.getFullAddress());     verify(addressRepository, times(1)).save(any(Address.class)); }
@Test void findAll_shouldReturnAddressDtoList() {     when(addressRepository.findAll()).thenReturn(List.of(AddressMappingHelper.map(addressDto)));     List<AddressDto> result = addressService.findAll();     assertNotNull(result);     assertEquals(1, result.size());     verify(addressRepository, times(1)).findAll(); }
@Test void findAll_shouldReturnAddressDtoList() {     when(addressRepository.findAll()).thenReturn(List.of(AddressMappingHelper.map(addressDto)));     List<AddressDto> result = addressService.findAll();     assertNotNull(result);     assertEquals(1, result.size());     verify(addressRepository, times(1)).findAll(); }
@Test void findById_withValidId_shouldReturnAddressDto() {     when(addressRepository.findById(validAddressId)).thenReturn(Optional.of(AddressMappingHelper.map(addressDto)));     AddressDto result = addressService.findById(validAddressId);     assertNotNull(result);     assertEquals(validAddressId, result.getAddressId());     verify(addressRepository, times(1)).findById(validAddressId); }
@Test void findById_withValidId_shouldReturnAddressDto() {     when(addressRepository.findById(validAddressId)).thenReturn(Optional.of(AddressMappingHelper.map(addressDto)));     AddressDto result = addressService.findById(validAddressId);     assertNotNull(result);     assertEquals(validAddressId, result.getAddressId());     verify(addressRepository, times(1)).findById(validAddressId); }
@Test void findById_withInvalidId_shouldThrowException() {     when(addressRepository.findById(invalidAddressId)).thenReturn(Optional.empty());     assertThrows(AddressNotFoundException.class, () -> addressService.findById(invalidAddressId));     verify(addressRepository, times(1)).findById(invalidAddressId); }
@Test void save_shouldReturnPersistedAddressDto() {     when(addressRepository.save(any())).thenReturn(AddressMappingHelper.map(addressDto));     AddressDto result = addressService.save(addressDto);     assertNotNull(result);     assertEquals(addressDto.getAddressId(), result.getAddressId());     verify(addressRepository, times(1)).save(any()); }
@Test void save_shouldReturnPersistedAddressDto() {     when(addressRepository.save(any())).thenReturn(AddressMappingHelper.map(addressDto));     AddressDto result = addressService.save(addressDto);     assertNotNull(result);     assertEquals(addressDto.getAddressId(), result.getAddressId());     verify(addressRepository, times(1)).save(any()); }
@Test void update_shouldReturnUpdatedAddressDto() {     when(addressRepository.save(any())).thenReturn(AddressMappingHelper.map(addressDto));     AddressDto result = addressService.update(addressDto);     assertNotNull(result);     assertEquals(addressDto.getAddressId(), result.getAddressId());     verify(addressRepository, times(1)).save(any()); }
@Test void update_shouldReturnUpdatedAddressDto() {     when(addressRepository.save(any())).thenReturn(AddressMappingHelper.map(addressDto));     AddressDto result = addressService.update(addressDto);     assertNotNull(result);     assertEquals(addressDto.getAddressId(), result.getAddressId());     verify(addressRepository, times(1)).save(any()); }
@Test void update_shouldReturnUpdatedAddressDto() {     when(addressRepository.save(any())).thenReturn(AddressMappingHelper.map(addressDto));     AddressDto result = addressService.update(addressDto);     assertNotNull(result);     assertEquals(addressDto.getAddressId(), result.getAddressId());     verify(addressRepository, times(1)).save(any()); }
@Test void deleteById_shouldPerformDeletion() {     doNothing().when(addressRepository).deleteById(validAddressId);     addressService.deleteById(validAddressId);     verify(addressRepository, times(1)).deleteById(validAddressId); }
