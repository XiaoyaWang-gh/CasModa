String json = "[\n" + "  // this is a comment\n" + "  \"a\",\n" + "  /* this is another comment */\n" + "  \"b\",\n" + "  # this is yet another comment\n" + "  \"c\"\n" + "]"; List<String> abc = new Gson().fromJson(json, new TypeToken<List<String>>() {}.getType()); assertThat(abc).containsExactly("a", "b", "c").inOrder(); 
InetAddress address = InetAddress.getByName("8.8.8.8"); String jsonAddress = gson.toJson(address); InetAddress value = gson.fromJson(jsonAddress, InetAddress.class); assertThat(address).isEqualTo(value); 
Type mapType = new TypeToken<Map<String, String>>() { }.getType(); Map<String, String> myMap = new HashMap<>(); String key = "key1"; myMap.put(key, "value1"); Gson gson = new Gson(); JsonElement element = gson.toJsonTree(myMap, mapType); assertThat(element.isJsonObject()).isTrue(); 
Type mapType = new TypeToken<Map<String, String>>() { }.getType(); Map<String, String> myMap = new HashMap<>(); String key = "key1"; myMap.put(key, "value1"); Gson gson = new Gson(); JsonElement element = gson.toJsonTree(myMap, mapType); JsonObject mapJsonObject = element.getAsJsonObject(); assertThat(mapJsonObject.has(key)).isTrue(); 
Type mapType = new TypeToken<Map<String, String>>() { }.getType(); Map<String, String> emptyMap = new HashMap<>(); JsonElement element = gson.toJsonTree(emptyMap, mapType); assertThat(element).isInstanceOf(JsonObject.class); 
Map<String, String> emptyMap = new HashMap<>(); JsonElement element = gson.toJsonTree(emptyMap, emptyMap.getClass()); assertThat(element).isInstanceOf(JsonObject.class); 
Excluder excluder = Excluder.DEFAULT.excludeFieldsWithoutExposeAnnotation(); Field f = createFieldAttributes("hiddenField"); assertThat(excluder.excludeField(f, true)).isTrue(); assertThat(excluder.excludeField(f, false)).isTrue();
Excluder excluder = Excluder.DEFAULT.excludeFieldsWithoutExposeAnnotation(); Field f = createFieldAttributes("explicitlyDifferentModeField"); assertThat(excluder.excludeField(f, true)).isFalse(); assertThat(excluder.excludeField(f, false)).isTrue();
Excluder excluder = Excluder.DEFAULT.excludeFieldsWithoutExposeAnnotation(); Field f = createFieldAttributes("exposedField"); assertThat(excluder.excludeField(f, true)).isFalse(); assertThat(excluder.excludeField(f, false)).isFalse();
Excluder excluder = Excluder.DEFAULT.excludeFieldsWithoutExposeAnnotation(); Field f = createFieldAttributes("explicitlyExposedField"); assertThat(excluder.excludeField(f, true)).isFalse(); assertThat(excluder.excludeField(f, false)).isFalse();
Excluder excluder = Excluder.DEFAULT.excludeFieldsWithoutExposeAnnotation(); Field f = createFieldAttributes("explicitlyHiddenField"); assertThat(excluder.excludeField(f, true)).isTrue(); assertThat(excluder.excludeField(f, false)).isTrue();
// Map from original -> expected String[][] argumentPairs =  { { "a", "a" }, { "ab", "ab" }, { "Ab", "Ab" }, { "aB", "a_B" }, { "AB", "A_B" }, { "A_B", "A__B" }, { "firstSecondThird", "first_Second_Third" }, { "__", "__" }, { "_123", "_123" } }; for (String[] pair : argumentPairs) { assertThat(FieldNamingPolicy.separateCamelCase(pair[0], '_')).isEqualTo(pair[1]); } 
// Map from original -> expected String[][] argumentPairs =  { { "a", "A" }, { "ab", "Ab" }, { "AB", "AB" }, { "_a", "_A" }, { "_ab", "_Ab" }, { "__", "__" }, { "_1", "_1" }, { "\u2170", "\u2170" }, { "_\u2170", "_\u2170" }, { "\u2170a", "\u2170A" }, }; for (String[] pair : argumentPairs) { assertThat(FieldNamingPolicy.upperCaseFirstLetter(pair[0])).isEqualTo(pair[1]); } 
ourType = $Gson$Types.arrayOf($Gson$Types.newParameterizedTypeWithOwner(null, List.class, String.class)); Type parameterizedType = new TypeToken<List<String>>() {}.getType(); Type genericArrayType = new TypeToken<List<String>[]>() {}.getType(); assertThat(ourType.getGenericComponentType()).isEqualTo(parameterizedType); assertThat(ourType).isEqualTo(genericArrayType); assertThat(ourType.hashCode()).isEqualTo(genericArrayType.hashCode());
ourType = $Gson$Types.arrayOf($Gson$Types.newParameterizedTypeWithOwner(null, List.class, String.class)); Type differentGenericArrayType = new TypeToken<List<String>[][]>() {}.getType(); assertThat(differentGenericArrayType.equals(ourType)).isFalse(); assertThat(ourType.equals(differentGenericArrayType)).isFalse();
InnerClass innerClass = new InnerClass(); Field f = getClass().getField("innerClass"); Excluder excluder = Excluder.DEFAULT.disableInnerClassSerialization(); assertThat(excluder.excludeField(f, true)).isTrue(); 
Excluder excluder = Excluder.DEFAULT.disableInnerClassSerialization(); Class<?> clazz = staticNestedClass.getClass(); StaticNestedClass staticNestedClass = new StaticNestedClass(); assertThat(excluder.excludeClass(clazz, true)).isFalse(); 
Excluder excluder = Excluder.DEFAULT.disableInnerClassSerialization(); StaticNestedClass staticNestedClass = new StaticNestedClass(); Field f = getClass().getField("staticNestedClass"); assertThat(excluder.excludeField(f, true)).isFalse(); 
Excluder excluder = Excluder.DEFAULT.disableInnerClassSerialization(); InnerClass innerClass = new InnerClass(); Class<?> clazz = innerClass.getClass(); Class<?> clazz = innerClass.getClass(); assertThat(excluder.excludeClass(clazz, true)).isTrue(); 
GsonBuilder builder = new GsonBuilder(); thrown.expect(IllegalArgumentException.class); builder.setVersion(Double.NaN); thrown.expect(IllegalArgumentException.class); builder.setVersion(-0.1);
Gson gson = new GsonBuilder().disableJdkUnsafe().create(); thrown.expect(JsonIOException.class); gson.fromJson("{}", ClassWithoutNoArgsConstructor.class); 
Gson gson = new GsonBuilder().excludeFieldsWithModifiers().create(); assertThat(gson.toJson(new HasTransients())).isEqualTo("{\"a\":\"a\"}"); 
Gson gson = new GsonBuilder().excludeFieldsWithModifiers(Modifier.VOLATILE, Modifier.PRIVATE).create(); assertThat(gson.toJson(new HasModifiers())).isEqualTo("{\"d\":\"d\"}"); 
GsonBuilder builder = new GsonBuilder(); Gson gson = builder.create(); builder.setFieldNamingStrategy(new FieldNamingStrategy() { @Override public String translateName(Field f) { return "test"; } } ); Gson otherGson = builder.create(); assertThat(otherGson).isNotNull(); assertThat(gson).isNotSameInstanceAs(otherGson);
Gson original = new Gson(CUSTOM_EXCLUDER, CUSTOM_FIELD_NAMING_STRATEGY, new HashMap<Type, InstanceCreator<?>>(), true, false, true, false, FormattingStyle.DEFAULT, true, false, true, LongSerializationPolicy.DEFAULT, null, DateFormat.DEFAULT, DateFormat.DEFAULT, new ArrayList<TypeAdapterFactory>(), new ArrayList<TypeAdapterFactory>(), new ArrayList<TypeAdapterFactory>(), CUSTOM_OBJECT_TO_NUMBER_STRATEGY, CUSTOM_NUMBER_TO_NUMBER_STRATEGY, Collections.<ReflectionAccessFilter>emptyList()); Gson clone = original.newBuilder() .registerTypeAdapter(Object.class, new TestTypeAdapter()) .create(); assertThat(clone.factories).hasSize(original.factories.size() + 1); 
Gson gson = new Gson(); thrown.expect(NullPointerException.class); gson.getAdapter((TypeToken<?>) null); 
String json = "test"; JsonReader jsonReader = new Gson().newJsonReader(new StringReader(json)); thrown.expect(MalformedJsonException.class); jsonReader.nextString(); 
StringWriter writer = new StringWriter(); JsonWriter jsonWriter = new Gson().newJsonWriter(writer); jsonWriter.beginObject(); jsonWriter.name("test"); jsonWriter.nullValue(); jsonWriter.name("<test2"); jsonWriter.value(true); jsonWriter.endObject(); thrown.expect(IllegalStateException.class); jsonWriter.value(1); 
StringWriter writer = new StringWriter(); JsonWriter jsonWriter = new GsonBuilder() .disableHtmlEscaping() .generateNonExecutableJson() .setPrettyPrinting() .serializeNulls() .setLenient() .create() .newJsonWriter(writer); jsonWriter.beginObject(); jsonWriter.name("test"); jsonWriter.nullValue(); jsonWriter.name("<test2"); jsonWriter.value(true); jsonWriter.endObject(); // Additional top-level value jsonWriter.value(1); jsonWriter.close(); assertThat(writer.toString()).isEqualTo("\)]}'\n{\n  \"test\": null,\n  \"<test2\": true\n}1"); 
String json = "test"; // String without quotes JsonReader jsonReader = new GsonBuilder().setLenient().create().newJsonReader(new StringReader(json)); assertThat(jsonReader.nextString()).isEqualTo("test"); jsonReader.close(); 
thrown.expect(JsonParseException.class); gson.fromJson("{\"abc\":123}", BigInteger.class);
thrown.expect(IllegalStateException.class); gson.toJson(new AtomicLong(0)); 
int intialValue = 1; AtomicInteger atomicInt = new AtomicInteger(intialValue); String json = gson.toJson(atomicInt); assertThat(Integer.parseInt(json)).isEqualTo(intialValue + 1);
String expected = "blah"; String actual = gson.toJson(expected); actual = gson.fromJson(actual, String.class); assertThat(actual).isEqualTo("\"" + expected + "\""); assertThat(actual).isEqualTo(expected);
ObjectConstructor<AbstractClass> constructor = constructorConstructor.get(TypeToken.get(AbstractClass.class)); thrown.expect(RuntimeException.class); constructor.construct(); 
ObjectConstructor<Interface> constructor = constructorConstructor.get(TypeToken.get(Interface.class)); thrown.expect(RuntimeException.class); constructor.construct(); 
long time = 1530209176870L; Date date = new Date(time); String dateStr = ISO8601Utils.format(date, true); String expectedDate = "2018-06-28T18:06:16.870Z"; assertThat(dateStr).isEqualTo(expectedDate); 
long time = 1530209176870L; Date date = new Date(time); String dateStr = ISO8601Utils.format(date, true, TimeZone.getTimeZone("Brazil/East")); String expectedDate = "2018-06-28T15:06:16.870-03:00"; assertThat(dateStr).isEqualTo(expectedDate); 
GregorianCalendar calendar = new GregorianCalendar(utcTimeZone(), Locale.US); // Calendar was created with current time, must clear it calendar.clear(); calendar.set(2018, Calendar.JUNE, 25); Date date = calendar.getTime(); String dateStr = ISO8601Utils.format(date); String expectedDate = "2018-06-25"; assertThat(dateStr.substring(0, expectedDate.length())).isEqualTo(expectedDate); 
String dateStr = "2018-06-25T00:00:00-03:00"; Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0)); GregorianCalendar calendar = createUtcCalendar(); calendar.set(2018, Calendar.JUNE, 25, 3, 0); Date expectedDate = calendar.getTime(); assertThat(date).isEqualTo(expectedDate); 
String dateStr = "2022-14-30"; thrown.expect(ParseException.class); ISO8601Utils.parse(dateStr, new ParsePosition(0)); 
String dateStr = "2018-06-25"; Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0)); Date expectedDate = new GregorianCalendar(2018, Calendar.JUNE, 25).getTime(); assertThat(date).isEqualTo(expectedDate); 
String dateStr = "2018-06-25"; Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0)); Date expectedDate = new GregorianCalendar(2018, Calendar.JUNE, 25).getTime(); thrown.expect(ParseException.class); 
String dateStr = "2018-06-25T00:02:00-02:58"; Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0)); GregorianCalendar calendar = createUtcCalendar(); calendar.set(2018, Calendar.JUNE, 25, 3, 0); Date expectedDate = calendar.getTime(); assertThat(date).isEqualTo(expectedDate); 
final String dateStr = "2018-06-25T61:60:62-03:00"; thrown.expect(ParseException.class); ISO8601Utils.parse(dateStr, new ParsePosition(0)); 
thrown.expect(IllegalArgumentException.class); DateType.DATE.createAdapterFactory("I am a bad Date pattern...."); 
int dateStyle = DateFormat.LONG; TypeAdapter<Date> dateTypeAdapter = dateAdapter(DateType.DATE.createAdapterFactory(dateStyle)); DateFormat formatter = DateFormat.getDateInstance(dateStyle, Locale.US); Date currentDate = new Date(); String dateString = dateTypeAdapter.toJson(currentDate); assertThat(dateString).isEqualTo(toLiteral(formatter.format(currentDate))); 
String pattern = "yyyy-MM-dd"; TypeAdapter<Date> dateTypeAdapter = dateAdapter(DateType.DATE.createAdapterFactory(pattern)); DateFormat formatter = new SimpleDateFormat(pattern); Date currentDate = new Date(); String dateString = dateTypeAdapter.toJson(currentDate); assertThat(dateString).isEqualTo(toLiteral(formatter.format(currentDate))); 
TypeAdapterFactory adapterFactory = DateType.DATE.createDefaultsAdapterFactory(); assertParsed("1970-01-01T00:00:00.000Z", adapterFactory); assertParsed("1970-01-01T00:00Z", adapterFactory); assertParsed("1970-01-01T00:00:00+00:00", adapterFactory); assertParsed("1970-01-01T01:00:00+01:00", adapterFactory); assertParsed("1970-01-01T01:00:00+01", adapterFactory);
TypeAdapter<Date> adapter = dateAdapter(DateType.DATE.createDefaultsAdapterFactory()); assertThat(adapter.fromJson("null")).isNull(); assertThat(adapter.toJson(null)).isEqualTo("null");
JsonTreeReader reader = new JsonTreeReader(new JsonObject()); reader.beginObject(); reader.endObject(); assertThat(reader.hasNext()).isFalse(); 
JsonTreeReader reader = new JsonTreeReader(new JsonObject()); reader.beginObject(); reader.skipValue(); assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT); assertThat(reader.getPath()).isEqualTo("$");
JsonTreeReader reader = new JsonTreeReader(new JsonObject()); reader.beginObject(); reader.endObject(); assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT); assertThat(reader.getPath()).isEqualTo("$"); reader.skipValue(); assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT); assertThat(reader.getPath()).isEqualTo("$");
JsonObject jsonObject = new JsonObject(); JsonArray jsonArray = new JsonArray(); jsonArray.add('c'); jsonArray.add("text"); jsonObject.add("a", jsonArray); jsonObject.addProperty("b", true); jsonObject.addProperty("i", 1); jsonObject.add("n", JsonNull.INSTANCE); JsonObject jsonObject2 = new JsonObject(); jsonObject2.addProperty("n", 2L); jsonObject.add("o", jsonObject2); jsonObject.addProperty("s", "text"); JsonTreeReader in = new JsonTreeReader(jsonObject); in.skipValue(); assertThat(in.peek()).isEqualTo(JsonToken.END_DOCUMENT); assertThat(in.getPath()).isEqualTo("$");
JsonObject jsonObject = new JsonObject(); jsonObject.addProperty("a", "value"); JsonTreeReader in = new JsonTreeReader(jsonObject); in.beginObject(); in.skipValue(); assertThat(in.peek()).isEqualTo(JsonToken.STRING); assertThat(in.getPath()).isEqualTo("$.<skipped>"); assertThat(in.nextString()).isEqualTo("value");
JsonTreeReader in = new JsonTreeReader(new JsonObject()); in.skipValue(); assertThat(in.peek()).isEqualTo(JsonToken.END_DOCUMENT); assertThat(in.getPath()).isEqualTo("$");
class CustomSubclass extends JsonElement { @Override public JsonElement deepCopy() { return this; } } JsonArray array = new JsonArray(); array.add(new CustomSubclass()); JsonTreeReader reader = new JsonTreeReader(array); reader.beginArray(); thrown.expect(MalformedJsonException.class); reader.peek(); 
JsonTreeReader reader = new JsonTreeReader(new JsonArray()); reader.beginArray(); reader.skipValue(); assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT); assertThat(reader.getPath()).isEqualTo("$");
JsonTreeWriter writer = new JsonTreeWriter(); String n = "as"; assertThat(writer.value(n)).isEqualTo(writer); 
JsonTreeWriter writer = new JsonTreeWriter(); boolean bool = true; assertThat(writer.value(bool)).isEqualTo(writer); 
JsonTreeWriter writer = new JsonTreeWriter(); writer.setLenient(true); writer.beginArray(); thrown.expect(IOException.class); writer.close(); 
JsonTreeWriter writer = new JsonTreeWriter(); writer.setSerializeNulls(false); writer.beginObject(); writer.name("A"); writer.nullValue(); writer.endObject(); assertThat(writer.get().toString()).isEqualTo("{}"); 
JsonTreeWriter writer = new JsonTreeWriter(); writer.setLenient(true); writer.beginArray(); writer.value(Float.NaN); writer.value(Float.NEGATIVE_INFINITY); writer.value(Float.POSITIVE_INFINITY); writer.value(Double.NaN); writer.value(Double.NEGATIVE_INFINITY); writer.value(Double.POSITIVE_INFINITY); writer.endArray(); assertThat(writer.get().toString()).isEqualTo("[NaN,-Infinity,Infinity,NaN,-Infinity,Infinity]"); 
JsonTreeWriter writer = new JsonTreeWriter(); writer.beginArray(); writer.value(1); writer.value(2); writer.value(3); writer.endArray(); assertThat(writer.get().toString()).isEqualTo("[1,2,3]"); 
JsonTreeWriter writer = new JsonTreeWriter(); writer.beginArray(); writer.value(1); writer.value(2); writer.value(3); writer.endArray(); assertThat(writer.get().toString()).isEqualTo("[1,2,3]"); 
JsonTreeWriter writer = new JsonTreeWriter(); writer.beginArray(); writer.beginArray(); writer.endArray(); writer.beginArray(); writer.beginArray(); writer.endArray(); writer.endArray(); writer.endArray(); assertThat(writer.get().toString()).isEqualTo("[[],[[]]]"); 
JsonTreeWriter writer = new JsonTreeWriter(); writer.beginArray(); writer.beginArray(); writer.endArray(); writer.beginArray(); writer.beginArray(); writer.endArray(); writer.endArray(); writer.endArray(); assertThat(writer.get().toString()).isEqualTo("[[],[[]]]"); 
JsonTreeWriter writer = new JsonTreeWriter(); assertThat(writer.beginObject()).isEqualTo(writer); 
JsonTreeWriter writer = new JsonTreeWriter(); writer.setLenient(false); writer.beginArray(); thrown.expect(IllegalArgumentException.class); writer.value(Float.NaN); 
JsonTreeWriter writer = new JsonTreeWriter(); writer.beginArray(); thrown.expect(UnsupportedOperationException.class); writer.jsonValue("test"); 
JsonTreeWriter writer = new JsonTreeWriter(); assertThat(writer.beginArray()).isEqualTo(writer); 
JsonTreeWriter writer = new JsonTreeWriter(); Boolean bool = true; assertThat(writer.value(bool)).isEqualTo(writer); 
JsonTreeWriter writer = new JsonTreeWriter(); writer.setLenient(false); writer.beginArray(); thrown.expect(IllegalArgumentException.class); writer.value(Float.valueOf(Float.NaN)); 
JsonTreeWriter writer = new JsonTreeWriter(); writer.setLenient(true); writer.beginArray(); writer.value("A"); writer.endArray(); writer.close(); thrown.expect(IllegalStateException.class); writer.beginArray(); 
JsonTreeWriter writer = new JsonTreeWriter(); writer.beginObject(); writer.name("A").value(1); writer.name("B").value(2); writer.endObject(); assertThat(writer.get().toString()).isEqualTo("{\"A\":1,\"B\":2}"); 
JsonTreeWriter writer = new JsonTreeWriter(); writer.beginObject(); writer.name("A"); writer.beginObject(); writer.name("B"); writer.beginObject(); writer.endObject(); writer.endObject(); writer.name("C"); writer.beginObject(); writer.endObject(); writer.endObject(); assertThat(writer.get().toString()).isEqualTo("{\"A\":{\"B\":{}},\"C\":{}}"); 
JsonTreeWriter writer = new JsonTreeWriter(); writer.beginObject(); writer.name("A"); writer.beginObject(); writer.name("B"); writer.beginObject(); writer.endObject(); writer.endObject(); writer.name("C"); writer.beginObject(); writer.endObject(); writer.endObject(); assertThat(writer.get().toString()).isEqualTo("{\"A\":{\"B\":{}},\"C\":{}}"); 
JsonTreeWriter writer = new JsonTreeWriter(); writer.setSerializeNulls(true); writer.beginObject(); writer.name("A"); writer.nullValue(); writer.endObject(); assertThat(writer.get().toString()).isEqualTo("{\"A\":null}"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray(); jsonWriter.endArray(); assertThat(stringWriter.toString()).isEqualTo("[]"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray(); jsonWriter.endArray(); assertThat(stringWriter.toString()).isEqualTo("[]"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginObject(); jsonWriter.name("a"); thrown.expect(IllegalStateException.class); jsonWriter.name("a"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginObject(); jsonWriter.name("a"); thrown.expect(IllegalStateException.class); jsonWriter.endObject(); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray(); jsonWriter.value(true); jsonWriter.value(false); jsonWriter.endArray(); assertThat(stringWriter.toString()).isEqualTo("[true,false]"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray(); jsonWriter.value((Boolean) true); jsonWriter.value((Boolean) false); jsonWriter.value((Boolean) null); jsonWriter.endArray(); assertThat(stringWriter.toString()).isEqualTo("[true,false,null]"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.name("hello"); thrown.expect(IllegalStateException.class); jsonWriter.value("world"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginObject(); jsonWriter.name("a"); jsonWriter.value((String) null); jsonWriter.endObject(); assertThat(stringWriter.toString()).isEqualTo("{\"a\":null}"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); for (int i = 0; i < 20; i++) { jsonWriter.beginArray(); } for (int i = 0; i < 20; i++) { jsonWriter.endArray(); } assertThat(stringWriter.toString()).isEqualTo("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); for (int i = 0; i < 20; i++) { jsonWriter.beginArray(); } for (int i = 0; i < 20; i++) { jsonWriter.endArray(); } assertThat(stringWriter.toString()).isEqualTo("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray(); jsonWriter.value(0); jsonWriter.value(1); jsonWriter.value(-1); jsonWriter.value(Long.MIN_VALUE); jsonWriter.value(Long.MAX_VALUE); jsonWriter.endArray(); jsonWriter.close(); assertThat(stringWriter.toString()).isEqualTo("[0," + "1," + "-1," + "-9223372036854775808," + "9223372036854775807]"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray(); jsonWriter.nullValue(); jsonWriter.endArray(); assertThat(stringWriter.toString()).isEqualTo("[null]"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginObject(); try { jsonWriter.name(null); fail(); } catch (NullPointerException expected) { }
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginObject(); jsonWriter.name("a"); jsonWriter.beginArray(); jsonWriter.value(5); jsonWriter.value(false); jsonWriter.endArray(); jsonWriter.name("b"); jsonWriter.beginArray(); jsonWriter.value(6); jsonWriter.value(true); jsonWriter.endArray(); jsonWriter.endObject(); assertThat(stringWriter.toString()).isEqualTo("{\"a\":[5,false]," + "\"b\":[6,true]}"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginObject(); jsonWriter.name("a"); jsonWriter.beginArray(); jsonWriter.value(5); jsonWriter.value(false); jsonWriter.endArray(); jsonWriter.name("b"); jsonWriter.beginArray(); jsonWriter.value(6); jsonWriter.value(true); jsonWriter.endArray(); jsonWriter.endObject(); assertThat(stringWriter.toString()).isEqualTo("{\"a\":[5,false]," + "\"b\":[6,true]}"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.setLenient(true); jsonWriter.beginArray(); jsonWriter.value(Double.NaN); jsonWriter.value(Double.NEGATIVE_INFINITY); jsonWriter.value(Double.POSITIVE_INFINITY); jsonWriter.endArray(); assertThat(stringWriter.toString()).isEqualTo("[NaN,-Infinity,Infinity]"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginObject(); jsonWriter.name("a").value(true); jsonWriter.name("a").value(false); jsonWriter.endObject(); assertThat(stringWriter.toString()).isEqualTo("{\"a\":true,\"a\":false}"); 
String[] malformedNumbers = { "some text", "", ".", "00", "01", "-00", "-", "--1", "+1", // plus sign is not allowed for integer part "+", "1,0", "1,000", "0.", // decimal digit is required ".1", // integer part is required "e1", ".e1", ".1e1", "1e-", "1e+", "1e--1", "1e+-1", "1e1e1", "1+e1", "1e1.0", }; thrown.expect(IllegalArgumentException.class); for (String malformedNumber : malformedNumbers) { JsonWriter jsonWriter = new JsonWriter(new StringWriter()); jsonWriter.value(new LazilyParsedNumber(malformedNumber)); } 
StringWriter string1 = new StringWriter(); JsonWriter writer1 = new JsonWriter(string1); writer1.value(true); writer1.close(); assertThat(string1.toString()).isEqualTo("true"); 
StringWriter string2 = new StringWriter(); JsonWriter writer2 = new JsonWriter(string2); writer2.nullValue(); writer2.close(); assertThat(string2.toString()).isEqualTo("null"); 
StringWriter string3 = new StringWriter(); JsonWriter writer3 = new JsonWriter(string3); writer3.value(123); writer3.close(); assertThat(string3.toString()).isEqualTo("123"); 
StringWriter string4 = new StringWriter(); JsonWriter writer4 = new JsonWriter(string4); writer4.value(123.4); writer4.close(); assertThat(string4.toString()).isEqualTo("123.4"); 
StringWriter string5 = new StringWriter(); JsonWriter writert = new JsonWriter(string5); writert.value("a"); writert.close(); assertThat(string5.toString()).isEqualTo("\"a\""); 
StringWriter stringWriter = new StringWriter(); JsonWriter writer = new JsonWriter(stringWriter); writer.beginArray(); writer.endArray(); writer.close(); thrown.expect(IllegalStateException.class); writer.beginArray(); writer.endArray(); writer.beginObject(); writer.endObject(); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray(); jsonWriter.beginObject(); jsonWriter.name("a").value(5); jsonWriter.name("b").value(false); jsonWriter.endObject(); jsonWriter.beginObject(); jsonWriter.name("c").value(6); jsonWriter.name("d").value(true); jsonWriter.endObject(); jsonWriter.endArray(); assertThat(stringWriter.toString()).isEqualTo("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray(); jsonWriter.beginObject(); jsonWriter.name("a").value(5); jsonWriter.name("b").value(false); jsonWriter.endObject(); jsonWriter.beginObject(); jsonWriter.name("c").value(6); jsonWriter.name("d").value(true); jsonWriter.endObject(); jsonWriter.endArray(); assertThat(stringWriter.toString()).isEqualTo("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray(); jsonWriter.beginObject(); jsonWriter.name("a").value(5); jsonWriter.name("b").value(false); jsonWriter.endObject(); jsonWriter.beginObject(); jsonWriter.name("c").value(6); jsonWriter.name("d").value(true); jsonWriter.endObject(); jsonWriter.endArray(); assertThat(stringWriter.toString()).isEqualTo("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray(); jsonWriter.beginObject(); jsonWriter.name("a").value(5); jsonWriter.name("b").value(false); jsonWriter.endObject(); jsonWriter.beginObject(); jsonWriter.name("c").value(6); jsonWriter.name("d").value(true); jsonWriter.endObject(); jsonWriter.endArray(); assertThat(stringWriter.toString()).isEqualTo("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]"); 
StringWriter stringWriter = new StringWriter(); JsonWriter writer = new JsonWriter(stringWriter); writer.beginArray(); writer.endArray(); thrown.expect(IllegalStateException.class); writer.beginArray(); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginObject(); jsonWriter.name("a"); jsonWriter.jsonValue("{\"b\":true}"); jsonWriter.name("c"); jsonWriter.value(1); jsonWriter.endObject(); assertThat(stringWriter.toString()).isEqualTo("{\"a\":{\"b\":true},\"c\":1}"); 
StringWriter stringWriter = new StringWriter(); JsonWriter writer = new JsonWriter(stringWriter); writer.setLenient(true); writer.beginArray(); writer.endArray(); writer.beginArray(); writer.endArray(); writer.close(); assertThat(stringWriter.toString()).isEqualTo("[][]"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray(); jsonWriter.beginObject(); thrown.expect(IllegalStateException.class); jsonWriter.endArray(); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.setIndent("   "); jsonWriter.beginArray(); jsonWriter.value(true); jsonWriter.value(false); jsonWriter.value(5.0); jsonWriter.nullValue(); jsonWriter.beginObject(); jsonWriter.name("a").value(6.0); jsonWriter.name("b").value(7.0); jsonWriter.endObject(); jsonWriter.beginArray(); jsonWriter.value(8.0); jsonWriter.value(9.0); jsonWriter.endArray(); jsonWriter.endArray(); String expected = "[\n" + "   true,\n" + "   false,\n" + "   5.0,\n" + "   null,\n" + "   {\n" + "      \"a\": 6.0,\n" + "      \"b\": 7.0\n" + "   },\n" + "   [\n" + "      8.0,\n" + "      9.0\n" + "   ]\n" + "]"; assertThat(stringWriter.toString()).isEqualTo(expected); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.setIndent("   "); jsonWriter.beginObject(); jsonWriter.name("a").value(true); jsonWriter.name("b").value(false); jsonWriter.name("c").value(5.0); jsonWriter.name("e").nullValue(); jsonWriter.name("f").beginArray(); jsonWriter.value(6.0); jsonWriter.value(7.0); jsonWriter.endArray(); jsonWriter.name("g").beginObject(); jsonWriter.name("h").value(8.0); jsonWriter.name("i").value(9.0); jsonWriter.endObject(); jsonWriter.endObject(); String expected = "{\n" + "   \"a\": true,\n" + "   \"b\": false,\n" + "   \"c\": 5.0,\n" + "   \"e\": null,\n" + "   \"f\": [\n" + "      6.0,\n" + "      7.0\n" + "   ],\n" + "   \"g\": {\n" + "      \"h\": 8.0,\n" + "      \"i\": 9.0\n" + "   }\n" + "}"; assertThat(stringWriter.toString()).isEqualTo(expected); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginObject(); thrown.expect(IllegalStateException.class); jsonWriter.value(true); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginObject(); for (int i = 0; i < 20; i++) { jsonWriter.name("a"); jsonWriter.beginObject(); } for (int i = 0; i < 20; i++) { jsonWriter.endObject(); } jsonWriter.endObject(); assertThat(stringWriter.toString()).isEqualTo("{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":" + "{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{" + "}}}}}}}}}}}}}}}}}}}}}"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginObject(); for (int i = 0; i < 20; i++) { jsonWriter.name("a"); jsonWriter.beginObject(); } for (int i = 0; i < 20; i++) { jsonWriter.endObject(); } jsonWriter.endObject(); assertThat(stringWriter.toString()).isEqualTo("{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":" + "{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{" + "}}}}}}}}}}}}}}}}}}}}}"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginObject(); jsonWriter.endObject(); assertThat(stringWriter.toString()).isEqualTo("{}"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginObject(); jsonWriter.endObject(); assertThat(stringWriter.toString()).isEqualTo("{}"); 
String[] validNumbers = { "-0.0", "1.0", "1.7976931348623157E308", "4.9E-324", "0.0", "0.00", "-0.5", "2.2250738585072014E-308", "3.141592653589793", "2.718281828459045", "0", "0.01", "0e0", "1e+0", "1e-0", "1e0000", // leading 0 is allowed for exponent "1e00001", "1e+1", }; for (String validNumber : validNumbers) { StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.value(new LazilyParsedNumber(validNumber)); jsonWriter.close(); assertThat(stringWriter.toString()).isEqualTo(validNumber); } 
String lineSeparator = "\r\n"; StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.setFormattingStyle(FormattingStyle.DEFAULT.withIndent(" \t ").withNewline(lineSeparator)); jsonWriter.beginArray(); jsonWriter.value(true); jsonWriter.value("text"); jsonWriter.value(5.0); jsonWriter.nullValue(); jsonWriter.endArray(); String expected = "[\r\n" + " \t true,\r\n" + " \t \"text\",\r\n" + " \t 5.0,\r\n" + " \t null\r\n" + "]"; assertThat(stringWriter.toString()).isEqualTo(expected); 
String lineSeparator = "\r\n"; StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.setFormattingStyle(FormattingStyle.DEFAULT.withIndent(" \t ").withNewline(lineSeparator)); assertThat(jsonWriter.getFormattingStyle().getNewline()).isEqualTo(lineSeparator); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray(); jsonWriter.beginArray(); thrown.expect(IllegalStateException.class); jsonWriter.endObject(); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray().endArray(); thrown.expect(IllegalStateException.class); jsonWriter.beginArray(); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.setLenient(true); jsonWriter.beginArray(); jsonWriter.value(Float.NaN); jsonWriter.value(Float.NEGATIVE_INFINITY); jsonWriter.value(Float.POSITIVE_INFINITY); jsonWriter.endArray(); assertThat(stringWriter.toString()).isEqualTo("[NaN,-Infinity,Infinity]"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray(); thrown.expect(IllegalArgumentException.class); jsonWriter.value(Double.NaN); jsonWriter.value(Double.NEGATIVE_INFINITY); jsonWriter.value(Double.POSITIVE_INFINITY); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray(); assertThat(stringWriter.toString()).isEqualTo("[NaN,-Infinity,Infinity,Infinity]"); jsonWriter.value(Double.NaN); jsonWriter.value(Double.NEGATIVE_INFINITY); jsonWriter.value(Double.POSITIVE_INFINITY); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.setLenient(true); jsonWriter.beginArray(); jsonWriter.value(Double.valueOf(Double.NaN)); jsonWriter.value(Double.valueOf(Double.NEGATIVE_INFINITY)); jsonWriter.value(Double.valueOf(Double.POSITIVE_INFINITY)); jsonWriter.value(new LazilyParsedNumber("Infinity")); jsonWriter.endArray(); assertThat(stringWriter.toString()).isEqualTo("[NaN,-Infinity,Infinity,Infinity]"); 
StringWriter stringWriter = new StringWriter(); JsonWriter writer = new JsonWriter(stringWriter); writer.beginArray(); writer.endArray(); writer.close(); thrown.expect(IllegalStateException.class); writer.flush(); 
StringWriter stringWriter = new StringWriter(); JsonWriter writer = new JsonWriter(stringWriter); writer.beginArray(); writer.endArray(); writer.close(); thrown.expect(IllegalStateException.class); writer.value("a"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray(); jsonWriter.value(-0.0f); jsonWriter.value(1.0f); jsonWriter.value(Float.MAX_VALUE); jsonWriter.value(Float.MIN_VALUE); jsonWriter.value(0.0f); jsonWriter.value(-0.5f); jsonWriter.value(2.2250739E-38f); jsonWriter.value(3.723379f); jsonWriter.value((float) Math.PI); jsonWriter.value((float) Math.E); jsonWriter.endArray(); jsonWriter.close(); assertThat(stringWriter.toString()).isEqualTo("[-0.0," + "1.0," + "3.4028235E38," + "1.4E-45," + "0.0," + "-0.5," + "2.2250739E-38," + "3.723379," + "3.1415927," + "2.7182817]"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray(); thrown.expect(IllegalArgumentException.class); jsonWriter.value(Double.valueOf(Double.NaN)); jsonWriter.value(Double.valueOf(Double.NEGATIVE_INFINITY)); jsonWriter.value(Double.valueOf(Double.POSITIVE_INFINITY)); jsonWriter.value(new LazilyParsedNumber("Infinity")); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray(); jsonWriter.value(-0.0); jsonWriter.value(1.0); jsonWriter.value(Double.MAX_VALUE); jsonWriter.value(Double.MIN_VALUE); jsonWriter.value(0.0); jsonWriter.value(-0.5); jsonWriter.value(2.2250738585072014E-308); jsonWriter.value(Math.PI); jsonWriter.value(Math.E); jsonWriter.endArray(); jsonWriter.close(); assertThat(stringWriter.toString()).isEqualTo("[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray(); thrown.expect(IllegalArgumentException.class); jsonWriter.value(Float.NaN); jsonWriter.value(Float.NEGATIVE_INFINITY); jsonWriter.value(Float.POSITIVE_INFINITY); 
StringWriter stringWriter = new StringWriter(); JsonWriter writer = new JsonWriter(stringWriter); writer.beginArray(); writer.endArray(); writer.close(); thrown.expect(IllegalStateException.class); writer.name("a"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray(); jsonWriter.value(new BigInteger("0")); jsonWriter.value(new BigInteger("9223372036854775808")); jsonWriter.value(new BigInteger("-9223372036854775809")); jsonWriter.value(new BigDecimal("3.141592653589793238462643383")); jsonWriter.endArray(); jsonWriter.close(); assertThat(stringWriter.toString()).isEqualTo("[0," + "9223372036854775808," + "-9223372036854775809," + "3.141592653589793238462643383]"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray(); jsonWriter.value("a"); jsonWriter.value("a\""); jsonWriter.value("\""); jsonWriter.value(":"); jsonWriter.value(","); jsonWriter.value("\b"); jsonWriter.value("\f"); jsonWriter.value("\n"); jsonWriter.value("\r"); jsonWriter.value("\t"); jsonWriter.value(" "); jsonWriter.value("\\"); jsonWriter.value("{"); jsonWriter.value("}"); jsonWriter.value("["); jsonWriter.value("]"); jsonWriter.value("\0"); jsonWriter.value("\u0019"); jsonWriter.endArray(); assertThat(stringWriter.toString()).isEqualTo("[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"]"); 
StringWriter stringWriter = new StringWriter(); JsonWriter jsonWriter = new JsonWriter(stringWriter); jsonWriter.beginArray(); jsonWriter.value("\u2028 \u2029"); jsonWriter.endArray(); assertThat(stringWriter.toString()).isEqualTo("[\"\\u2028 \\u2029\"]"); 
JsonReader reader = new JsonReader(reader("[1.5]")); reader.beginArray(); thrown.expect(NumberFormatException.class); reader.nextInt(); reader.endArray(); 
JsonReader reader = new JsonReader(reader("[1.5]")); reader.beginArray(); assertThat(reader.nextDouble()).isEqualTo(1.5d); reader.endArray(); 
JsonReader reader = new JsonReader(reader("true")); reader.skipValue(); assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT); 
JsonReader reader = new JsonReader(reader("[// comment \n true]")); reader.beginArray(); thrown.expect(IOException.class); reader.skipValue(); 
JsonReader reader = new JsonReader(reader("[# comment \n true]")); reader.beginArray(); thrown.expect(IOException.class); reader.skipValue(); 
JsonReader reader = new JsonReader(reader("[/* comment */ true]")); reader.beginArray(); thrown.expect(IOException.class); reader.skipValue(); 
JsonReader reader = new JsonReader(reader("[0." + repeat('9', 8192) + "]")); reader.beginArray(); thrown.expect(MalformedJsonException.class); reader.nextDouble(); 
JsonReader reader = new JsonReader(reader("[] []")); reader.beginArray(); reader.endArray(); thrown.expect(IOException.class); reader.peek(); 
String json = "[\"\\"; JsonReader reader = new JsonReader(reader(json)); reader.beginArray(); thrown.expect(IOException.class); reader.nextString(); 
JsonReader reader = new JsonReader(reader("[] true {}")); reader.setLenient(true); reader.beginArray(); reader.endArray(); assertThat(reader.nextBoolean()).isTrue(); 
JsonReader reader = new JsonReader(reader("[] true {}")); reader.setLenient(true); reader.beginArray(); reader.endArray(); reader.beginObject(); reader.endObject(); assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT); 
JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}")); reader.beginObject(); assertThat(reader.nextName()).isEqualTo("a"); 
JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}")); reader.beginObject(); thrown.expect(IOException.class); reader.skipValue(); reader.skipValue(); 
JsonReader reader = new JsonReader(reader("['a']")); reader.setLenient(true); reader.beginArray(); assertThat(reader.nextString()).isEqualTo("a"); 
JsonReader reader = new JsonReader(reader("[true,false]")); reader.beginArray(); assertThat(reader.nextBoolean()).isTrue(); assertThat(reader.nextBoolean()).isFalse(); reader.endArray();
JsonReader reader = new JsonReader(reader( "{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}")); reader.beginObject(); assertThat(reader.nextName()).isEqualTo("a"); reader.skipValue(); assertThat(reader.nextName()).isEqualTo("b"); assertThat(reader.nextInt()).isEqualTo(123); reader.endObject(); assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);
JsonReader reader = new JsonReader(reader( "{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}")); reader.beginObject(); assertThat(reader.nextName()).isEqualTo("a"); assertThat(reader.peek()).isEqualTo(BEGIN_ARRAY); reader.skipValue(); assertThat(reader.nextName()).isEqualTo("b"); assertThat(reader.nextInt()).isEqualTo(123); reader.endObject(); assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);
JsonReader reader = new JsonReader(reader("[\"string")); reader.setLenient(true); reader.beginArray(); assertThat(reader.peek()).isEqualTo(JsonToken.STRING); thrown.expect(MalformedJsonException.class); reader.nextString();
// this is nested 40 levels deep; Gson is tuned for nesting is 30 levels deep or fewer JsonReader reader = new JsonReader(reader( "[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]")); for (int i = 0; i < 40; i++) { reader.beginArray(); } assertThat(reader.getPath()).isEqualTo("$[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]" + "[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]"); for (int i = 0; i < 40; i++) { reader.endArray(); } assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);
JsonReader reader = new JsonReader(reader("[\ufeff]")); reader.beginArray(); thrown.expect(IOException.class); reader.endArray(); 
JsonReader reader = new JsonReader(reader("[]")); reader.beginArray(); assertThat(reader.hasNext()).isFalse(); reader.endArray(); 
String json = "[NaN]"; JsonReader reader = new JsonReader(reader(json)); reader.beginArray(); thrown.expect(MalformedJsonException.class); reader.skipValue(); 
JsonReader reader = new JsonReader(reader( "{\"a\": \"android\", \"b\": \"banana\"}")); reader.beginObject(); assertThat(reader.nextName()).isEqualTo("a"); assertThat(reader.nextString()).isEqualTo("android"); assertThat(reader.nextName()).isEqualTo("b"); assertThat(reader.nextString()).isEqualTo("banana"); reader.endObject();
JsonReader reader = new JsonReader(reader( "{\"a\": \"android\", \"b\": \"banana\"}")); reader.beginObject(); assertThat(reader.nextName()).isEqualTo("a"); assertThat(reader.nextString()).isEqualTo("android"); assertThat(reader.nextName()).isEqualTo("b"); assertThat(reader.nextString()).isEqualTo("banana"); reader.endObject();
JsonReader reader = new JsonReader(reader("{\"a\":true,")); reader.beginObject(); assertThat(reader.nextName()).isEqualTo("a"); assertThat(reader.nextBoolean()).isTrue(); thrown.expect(IOException.class); reader.nextName(); 
JsonReader reader = new JsonReader(reader("[null]")); reader.beginArray(); thrown.expect(IllegalStateException.class); reader.nextString(); 
String json = "[0,0,0," + "1,1,1," + "-1,-1,-1," + "-9223372036854775808," + "9223372036854775807]"; JsonReader reader = new JsonReader(reader(json)); reader.beginArray(); assertThat(reader.nextLong()).isEqualTo(0L); assertThat(reader.nextInt()).isEqualTo(0); assertThat(reader.nextDouble()).isEqualTo(0.0); assertThat(reader.nextLong()).isEqualTo(1L); assertThat(reader.nextInt()).isEqualTo(1); assertThat(reader.nextDouble()).isEqualTo(1.0); assertThat(reader.nextLong()).isEqualTo(-1L); assertThat(reader.nextInt()).isEqualTo(-1); assertThat(reader.nextDouble()).isEqualTo(-1.0); assertThat(reader.nextLong()).isEqualTo(Long.MIN_VALUE); assertThat(reader.nextLong()).isEqualTo(Long.MAX_VALUE); reader.endArray();
thrown.expect(NullPointerException.class); new JsonReader(null); 
JsonReader reader = new JsonReader(reader("[truey]")); reader.setLenient(true); reader.beginArray(); assertThat(reader.peek()).isEqualTo(STRING); thrown.expect(IllegalStateException.class); reader.nextBoolean(); reader.endArray(); 
JsonReader reader = new JsonReader(reader("[True,TruE,False,FALSE,NULL,nulL]")); reader.beginArray(); assertThat(reader.nextBoolean()).isTrue(); assertThat(reader.nextBoolean()).isTrue(); assertThat(reader.nextBoolean()).isFalse(); assertThat(reader.nextBoolean()).isFalse(); reader.nextNull(); reader.nextNull(); reader.endArray(); assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);
JsonReader reader = new JsonReader(reader("[22233720368547758070]")); reader.setLenient(true); reader.beginArray(); assertThat(reader.peek()).isEqualTo(NUMBER); thrown.expect(NumberFormatException.class); reader.nextLong(); 
JsonReader reader = new JsonReader(reader("[a]")); reader.beginArray(); thrown.expect(MalformedJsonException.class); reader.skipValue(); 
JsonReader reader = new JsonReader(reader("{\"a\"=true}")); reader.beginObject(); assertThat(reader.nextName()).isEqualTo("a"); thrown.expect(IOException.class); reader.skipValue(); 
JsonReader reader = new JsonReader(reader("{\"a\"=>true}")); reader.beginObject(); assertThat(reader.nextName()).isEqualTo("a"); thrown.expect(IOException.class); reader.skipValue(); 
JsonReader reader = new JsonReader(reader("{a: 1}")); reader.setLenient(true); reader.beginObject(); reader.skipValue(); assertThat(reader.peek()).isEqualTo(JsonToken.NUMBER); 
JsonReader reader = new JsonReader(reader("[] []")); reader.beginArray(); reader.endArray(); thrown.expect(IOException.class); reader.skipValue(); 
JsonReader reader = new JsonReader(reader("[true;true]")); reader.setLenient(true); reader.beginArray(); assertThat(reader.nextBoolean()).isTrue(); assertThat(reader.nextBoolean()).isTrue();
JsonReader reader = new JsonReader(reader("{a:true}")); reader.setLenient(true); reader.beginObject(); assertThat(reader.nextName()).isEqualTo("a"); 
JsonReader reader = new JsonReader(reader("{'a':true}")); reader.setLenient(true); reader.beginObject(); assertThat(reader.nextName()).isEqualTo("a"); 
JsonReader reader = new JsonReader(reader("{\"a\":\"b\",}")); reader.setLenient(true); reader.beginObject(); assertThat(reader.nextName()).isEqualTo("a"); assertThat(reader.nextString()).isEqualTo("b"); thrown.expect(IOException.class); reader.peek(); 
JsonReader reader = new JsonReader(reader("[-9223372036854775808]")); reader.setLenient(true); reader.beginArray(); assertThat(reader.peek()).isEqualTo(NUMBER); assertThat(reader.nextLong()).isEqualTo(-9223372036854775808L); 
JsonReader reader = new JsonReader(reader("/x")); reader.setLenient(true); thrown.expect(MalformedJsonException.class); reader.peek(); 
String json = "[\"\\u000g\"]"; JsonReader reader = new JsonReader(reader(json)); reader.beginArray(); thrown.expect(MalformedJsonException.class); reader.nextString(); 
double d = -92233720368547758080d; JsonReader reader = new JsonReader(reader("[-92233720368547758080]")); reader.setLenient(true); reader.beginArray(); assertThat(reader.peek()).isEqualTo(NUMBER); thrown.expect(NumberFormatException.class); reader.nextLong(); 
JsonReader reader = new JsonReader(reader("{\"a\": 1}")); reader.beginObject(); reader.skipValue(); assertThat(reader.peek()).isEqualTo(JsonToken.NUMBER); assertThat(reader.getPath()).isEqualTo("$.<skipped>"); 
JsonReader reader = new JsonReader(reader("[\"null\"]")); reader.beginArray(); thrown.expect(IllegalStateException.class); reader.nextNull(); 
JsonReader reader = new JsonReader(reader("[\"// comment\"]")); reader.beginArray(); assertThat(reader.nextString()).isEqualTo("// comment"); reader.endArray(); 
JsonReader reader = new JsonReader(reader("[123e4b]")); reader.setLenient(true); reader.beginArray(); assertThat(reader.peek()).isEqualTo(STRING); 
JsonReader reader = new JsonReader(reader(")]}' []")); reader.setLenient(true); thrown.expect(IOException.class); assertThat(reader.nextString()).isEqualTo(")"); reader.nextString(); 
JsonReader reader = new JsonReader(reader("[123eb]")); reader.setLenient(true); reader.beginArray(); assertThat(reader.peek()).isEqualTo(STRING); 
JsonReader reader = new JsonReader(reader("[123e]")); reader.setLenient(true); reader.beginArray(); assertThat(reader.peek()).isEqualTo(STRING); 
JsonReader reader = new JsonReader(reader( "{\"a\":123456789,\"b\":-123456789}")); reader.beginObject(); assertThat(reader.nextName()).isEqualTo("a"); reader.skipValue(); assertThat(reader.nextName()).isEqualTo("b"); reader.skipValue(); reader.endObject(); assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);
JsonReader reader = new JsonReader(reader("[true;true]")); reader.beginArray(); thrown.expect(IOException.class); reader.skipValue(); reader.skipValue(); 
JsonReader reader = new JsonReader(reader("\"" + repeat('x', 8192) + "\"")); reader.setLenient(true); reader.skipValue(); assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT); 
JsonReader reader = new JsonReader(reader("{\"a\":}")); reader.beginObject(); assertThat(reader.nextName()).isEqualTo("a"); thrown.expect(IOException.class); reader.nextString(); 
JsonReader reader = new JsonReader(reader("{\"a\":\"android\"x")); reader.setLenient(true); reader.beginObject(); assertThat(reader.nextName()).isEqualTo("a"); assertThat(reader.nextString()).isEqualTo("android"); thrown.expect(MalformedJsonException.class); reader.peek(); 
char[] stringChars = new char[1024 * 16]; Arrays.fill(stringChars, 'x'); String string = new String(stringChars); String json = "[\"" + string + "\"]"; JsonReader reader = new JsonReader(reader(json)); reader.beginArray(); assertThat(reader.nextString()).isEqualTo(string); reader.endArray(); 
JsonReader reader = new JsonReader(reader("[1,{\"a\":[2,3,}")); reader.beginArray(); reader.nextInt(); reader.beginObject(); reader.nextName(); reader.beginArray(); reader.nextInt(); reader.nextInt(); thrown.expect(IOException.class); reader.peek(); 
JsonReader reader = new JsonReader(reader("{'a':true}")); reader.beginObject(); thrown.expect(IOException.class); reader.nextName(); 
JsonReader reader = new JsonReader(reader("[a]")); reader.setLenient(true); reader.beginArray(); assertThat(reader.nextString()).isEqualTo("a"); 
JsonReader reader = new JsonReader(reader("{'a':true}")); reader.beginObject(); thrown.expect(IOException.class); reader.skipValue(); 
JsonReader reader = new JsonReader(reader("[true,,true]")); reader.beginArray(); assertThat(reader.nextBoolean()).isTrue(); thrown.expect(IOException.class); reader.nextNull(); 
char[] stringChars = new char[1024 * 16]; Arrays.fill(stringChars, 'x'); String string = new String(stringChars); String json = "[" + string + "]"; JsonReader reader = new JsonReader(reader(json)); reader.setLenient(true); reader.beginArray(); assertThat(reader.nextString()).isEqualTo(string); reader.endArray(); 
JsonReader reader = new JsonReader(reader("{\"a\":\"b\",}")); reader.beginObject(); assertThat(reader.nextName()).isEqualTo("a"); assertThat(reader.nextString()).isEqualTo("b"); thrown.expect(IOException.class); reader.peek(); 
JsonReader reader = new JsonReader(reader( "{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}")); reader.beginObject(); assertThat(reader.nextName()).isEqualTo("a"); assertThat(reader.peek()).isEqualTo(BEGIN_ARRAY); reader.skipValue(); assertThat(reader.nextName()).isEqualTo("b"); assertThat(reader.nextInt()).isEqualTo(123); reader.endObject(); assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);
String array = "{\"a\":%s}"; String json = "true"; for (int i = 0; i < 40; i++) { json = String.format(array, json); } JsonReader reader = new JsonReader(reader(json)); for (int i = 0; i < 40; i++) { reader.beginObject(); assertThat(reader.nextName()).isEqualTo("a"); } assertThat(reader.getPath()).isEqualTo("$.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a" + ".a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a"); 
JsonReader reader = new JsonReader(reader(")]}'\n []")); reader.setLenient(true); reader.beginArray(); reader.endArray(); assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT); 
JsonReader reader = new JsonReader(reader("[true,,true]")); reader.setLenient(true); reader.beginArray(); assertThat(reader.nextBoolean()).isTrue(); reader.nextNull(); assertThat(reader.nextBoolean()).isTrue(); reader.endArray();
String json = "[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"," + "\"\\u20AC\"" + "]"; JsonReader reader = new JsonReader(reader(json)); reader.beginArray(); assertThat(reader.nextString()).isEqualTo("a"); assertThat(reader.nextString()).isEqualTo("a\""); assertThat(reader.nextString()).isEqualTo("\""); assertThat(reader.nextString()).isEqualTo(":"); assertThat(reader.nextString()).isEqualTo(","); assertThat(reader.nextString()).isEqualTo("\b"); assertThat(reader.nextString()).isEqualTo("\f"); assertThat(reader.nextString()).isEqualTo("\n"); assertThat(reader.nextString()).isEqualTo("\r"); assertThat(reader.nextString()).isEqualTo("\t"); assertThat(reader.nextString()).isEqualTo(" "); assertThat(reader.nextString()).isEqualTo("\\"); assertThat(reader.nextString()).isEqualTo("{"); assertThat(reader.nextString()).isEqualTo("}"); assertThat(reader.nextString()).isEqualTo("["); assertThat(reader.nextString()).isEqualTo("]"); assertThat(reader.nextString()).isEqualTo("\0"); assertThat(reader.nextString()).isEqualTo("\u0019"); assertThat(reader.nextString()).isEqualTo("\u20AC"); reader.endArray(); assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);
JsonReader reader = new JsonReader(reader("{\"a\":true}")); reader.beginObject(); assertThat(reader.nextName()).isEqualTo("a"); 
JsonReader reader = new JsonReader(reader("[-22233720368547758070]")); reader.setLenient(true); reader.beginArray(); assertThat(reader.peek()).isEqualTo(NUMBER); 
JsonReader reader = new JsonReader(reader("{}")); reader.beginObject(); assertThat(reader.hasNext()).isFalse(); reader.endObject(); assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT); 
String json = "[\"\\"; JsonReader reader = new JsonReader(reader(json)); reader.beginArray(); thrown.expect(IOException.class); reader.nextString(); 
JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}")); reader.setLenient(true); reader.beginObject(); assertThat(reader.nextName()).isEqualTo("a"); assertThat(reader.nextBoolean()).isTrue(); assertThat(reader.nextName()).isEqualTo("b");
JsonReader reader = new JsonReader(reader( "{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}")); reader.skipValue(); assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT); 
JsonReader reader = new JsonReader(reader("[true;true]")); reader.beginArray(); thrown.expect(IOException.class); reader.nextBoolean(); reader.nextBoolean(); 
String json = "[NaN, -Infinity, Infinity]"; JsonReader reader = new JsonReader(reader(json)); reader.setLenient(true); reader.beginArray(); assertThat(Double.isNaN(reader.nextDouble())).isTrue(); assertThat(reader.nextDouble()).isEqualTo(Double.NEGATIVE_INFINITY); assertThat(reader.nextDouble()).isEqualTo(Double.POSITIVE_INFINITY); reader.endArray();
JsonReader reader = new JsonReader(reader("[a]")); reader.beginArray(); thrown.expect(MalformedJsonException.class); reader.nextString(); 
JsonReader reader = new JsonReader(reader("[9223372036854775807]")); reader.setLenient(true); reader.beginArray(); assertThat(reader.peek()).isEqualTo(NUMBER); assertThat(reader.nextLong()).isEqualTo(9223372036854775807L); 
JsonReader reader = new JsonReader(reader("/* foo *//")); reader.setLenient(true); thrown.expect(MalformedJsonException.class); reader.peek(); 
JsonReader reader = new JsonReader(reader("[\"12\\u00334\"]")); reader.setLenient(true); reader.beginArray(); assertThat(reader.peek()).isEqualTo(STRING); assertThat(reader.nextInt()).isEqualTo(1234);
JsonReader reader = new JsonReader(reader(")]}'\n []")); thrown.expect(IOException.class); reader.beginArray(); 
String json = "{\n" + "   \"h\\ello\": true,\n" + "   \"foo\": [\"world\"]\n" + "}"; JsonReader reader = new JsonReader(reader(json)); reader.beginObject(); thrown.expect(IOException.class); reader.nextName(); 
char[] stringChars = new char[1024 * 16]; Arrays.fill(stringChars, 'x'); String string = new String(stringChars); String json = "[" + string; JsonReader reader = new JsonReader(reader(json)); reader.setLenient(true); reader.beginArray(); assertThat(reader.nextString()).isEqualTo(string); 
JsonReader reader = new JsonReader(reader("[-0]")); reader.setLenient(false); reader.beginArray(); assertThat(reader.peek()).isEqualTo(NUMBER); assertThat(reader.nextString()).isEqualTo("-0"); 
JsonReader reader = new JsonReader(reader("{a:true}")); reader.beginObject(); thrown.expect(IOException.class); reader.nextName(); 
JsonReader reader = new JsonReader(reader("[// comment \n true]")); reader.setLenient(true); reader.beginArray(); assertThat(reader.nextBoolean()).isTrue(); 
JsonReader reader = new JsonReader(reader("{}")); reader.beginObject(); reader.endObject(); assertThat(reader.hasNext()).isFalse(); 
